<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS中Position属性详解</title>
    <url>/2020/05/05/CSS%E4%B8%ADPosition%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="一、Position属性是什么？"><a href="#一、Position属性是什么？" class="headerlink" title="一、Position属性是什么？"></a>一、Position属性是什么？</h1><p>Position属性在CSS中是定位的意思！而定位指的是将指定元素摆放到页面的任意方式，通过定位可以任意的摆放元素，其中Position可选的值分别有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.static          默认值，元素没有开启定位</span><br><span class="line">2.relative				相对定位</span><br><span class="line">3.absolute				绝对定位</span><br><span class="line">4.fixed						固定定位</span><br></pre></td></tr></table></figure>

<p>接下来我们会对这四个值分别做详细的解释，并且举例子说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当开启了元素的定位（position的属性值是一个非static的值）时</span><br><span class="line">可以通过left、right、top、bottom四个属性来设置元素的偏移量</span><br><span class="line">    left：元素相对于其定位位置的左侧偏移量</span><br><span class="line">    right：元素相对于其定位位置的右侧偏移量</span><br><span class="line">    top：元素相对于其定位位置的上面偏移量</span><br><span class="line">    bottom：元素相对于其定位位置的下面偏移量</span><br><span class="line">    </span><br><span class="line"> 注意： 通常偏移量只需要使用两个，就可以对一个元素进行定位，一般选择水平的一个偏移量和一个垂直方向的偏移</span><br><span class="line">量来为一个元素进行定位</span><br></pre></td></tr></table></figure>

<h2 id="1-static默认值"><a href="#1-static默认值" class="headerlink" title="1.static默认值"></a>1.static默认值</h2><p>在Position的值为这个的时候，元素不会发生任何变化，元素的位置也还是在该位置</p>
<h2 id="2-relative相对定位"><a href="#2-relative相对定位" class="headerlink" title="2.relative相对定位"></a>2.relative相对定位</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">relative        开启元素的相对定位</span><br><span class="line">                当position的属性是relative的时候，就开启了相对定位</span><br><span class="line">                1.开启了元素的相对定位以后，而不设置偏移量时，元素不会发生改变</span><br><span class="line">                2.相对定位是相对于元素在文档流中原来的位置进行定位</span><br><span class="line">                3.相对定位的元素不会脱离文档流</span><br><span class="line">                4.相对定位会使元素提升一个层级</span><br><span class="line">                5.相对定位不会改变元素的性质，快元素还是块元素，内联还是内联元素</span><br></pre></td></tr></table></figure>

<p>接下来给出一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;相对定位&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        &#x2F;* 清除浏览器自带的样式 *&#x2F;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;* 定义三个盒子分别的颜色，然后宽高都设置为200像素 *&#x2F;</span><br><span class="line">      .box1 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;* 盒子开启相对定位让其相对left偏移200像素 *&#x2F;</span><br><span class="line">      .box2 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">        position: relative;</span><br><span class="line">        left: 200px;</span><br><span class="line">      &#125;</span><br><span class="line">      .box3 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- 定义三个盒子 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box1&quot;&gt;我是盒子1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box2&quot;&gt;我是盒子2&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box3&quot;&gt;我是盒子3&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>图例子</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527002841.png">

<p>可以看到，盒子在设置了相对定位并且设置了向左偏移了200像素，盒子是向右出去了200像素，所以这个偏移量往哪边偏移就是往相反的方向去！</p>
<h2 id="3-absolute绝对定位"><a href="#3-absolute绝对定位" class="headerlink" title="3.absolute绝对定位"></a>3.absolute绝对定位</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">absolute     开启元素的绝对定位</span><br><span class="line">             当position的属性是absolute的时候，就开启了相对定位</span><br><span class="line">             1.开启绝对定位元素会脱离文档流</span><br><span class="line">             2.开启绝对定位以后如果不设置偏移量，则元素的位置不会发生改变</span><br><span class="line">             3.绝对定位是相对于离他最近的开启了祖先元素进行定位，如果所有的祖先元素都没有开启定位，则会相对于浏览器窗口进行定位</span><br><span class="line">             一般情况开启了字元素的的绝对定位，都会开启父元素的相对定位</span><br><span class="line">             4.绝对定位会使元素提升一个层级</span><br><span class="line">             5.绝对定位会改变元素的性质</span><br><span class="line">                 内联元素会变成块元素</span><br><span class="line">                 块元素的宽度和高度都会默认都被内容撑开</span><br></pre></td></tr></table></figure>

<p>接下来给出一个例子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;相对定位&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        &#x2F;* 清除浏览器自带的样式 *&#x2F;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;* 定义三个盒子分别的颜色，然后宽高都设置为200像素 *&#x2F;</span><br><span class="line">      .box1 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;* 盒子开启绝对定位让其相对left偏移200像素 *&#x2F;</span><br><span class="line">      .box2 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 200px;</span><br><span class="line">      &#125;</span><br><span class="line">      .box3 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- 定义三个盒子 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box1&quot;&gt;我是盒子1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box2&quot;&gt;我是盒子2&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box3&quot;&gt;我是盒子3&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>图解：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002855.png" alt></p>
<p>可以看到，现在box2没有祖先元素，所以它相对于浏览器窗口进行定位，而且也不占据位置</p>
<p>接下来我们在box2中嵌套一个box4，并且给他设置偏移量，把box2也开启定位，并设置坐外边距，让其距离左边远一点，看看情况会是怎么样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;相对定位&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        &#x2F;* 清除浏览器自带的样式 *&#x2F;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;* 定义三个盒子分别的颜色，然后宽高都设置为200像素 *&#x2F;</span><br><span class="line">      .box1 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;* 盒子开启绝对定位让其相对left偏移200像素 *&#x2F;</span><br><span class="line">      .box2 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: blue;</span><br><span class="line">        position: static;</span><br><span class="line">        &#x2F;* left: 200px; *&#x2F;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">      .box3 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: red;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">      .box4 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: cornflowerblue;</span><br><span class="line">        position: relative;</span><br><span class="line">        left: 200px;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;!-- 定义三个盒子 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box1&quot;&gt;我是盒子1&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box2&quot;&gt;</span><br><span class="line">      我是盒子2</span><br><span class="line">      &lt;div class&#x3D;&quot;box4&quot;&gt;我是盒子4&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box3&quot;&gt;我是盒子3&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>图解：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002913.png" alt></p>
<p>可以很清晰的看到盒子是根据其开了定位的祖先元素进行偏移的，而不是针对浏览器进行偏移</p>
<h2 id="4-fixed固定定位"><a href="#4-fixed固定定位" class="headerlink" title="4.fixed固定定位"></a>4.fixed固定定位</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fixed  开启元素的固定地位（也是绝对定位的一种）</span><br><span class="line">    当position的属性是fixed的时候，就开启了固定定位</span><br><span class="line">    固定定位也是一种绝对定位，它的大部分特点都和绝对定位一样</span><br><span class="line">    不同的是：</span><br><span class="line">        固定定位永远都会相对于浏览器的窗口定位</span><br><span class="line">        固定定位会固定在浏览器的某个位置，不会随滚动条滚动</span><br></pre></td></tr></table></figure>

<p>看一下例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;固定定位&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .box1 &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: cyan;</span><br><span class="line">            position: fixed;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box1&quot;&gt;我是box1&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002919.png" alt></p>
<p>可以看到，和相对定位是没有什么差别的，但是现在我们把body的高度设置很长，右侧出现滚动条。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;固定定位&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line">            height: 5000px;</span><br><span class="line">        &#125;</span><br><span class="line">        .box1 &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: cyan;</span><br><span class="line">            position: fixed;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box1&quot;&gt;我是box1&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>然后这个时候运行，再拖动滚动条你就会发现无论你页面拖动到什么位置，box1一直都会出现在左上角。</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002927.png" alt></p>
<p>可以看到我滚动条拖到一半了，box1还是在左上角位置从没变过</p>
<p>注意：在网页开发中，固定定位一般不常使用，只有在特定的用处才会使用，比如网页上常见的小广告。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSS定位属性允许你为一个元素定位。它也可以将一个元素放在另一个元素后面，</span><br><span class="line">并指定一个元素的内容太大时，</span><br><span class="line">应该发生什么。元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，</span><br><span class="line">除非事先设定position属性。他们也有不同的工作方式，这取决于定位方法.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Ftp服务器的配置与管理</title>
    <url>/2020/04/25/Ftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="第一步：我们先检查是否安装-ftp服务器的软件"><a href="#第一步：我们先检查是否安装-ftp服务器的软件" class="headerlink" title="第一步：我们先检查是否安装 ftp服务器的软件"></a>第一步：我们先检查是否安装 ftp服务器的软件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa|grep vsftpd</span><br></pre></td></tr></table></figure>

<h1 id="第二步：使用yum方式安装ftp服务器软件"><a href="#第二步：使用yum方式安装ftp服务器软件" class="headerlink" title="第二步：使用yum方式安装ftp服务器软件"></a>第二步：使用yum方式安装ftp服务器软件</h1><h2 id="创建存储库"><a href="#创建存储库" class="headerlink" title="创建存储库"></a>创建存储库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir &#x2F;cdrom</span><br></pre></td></tr></table></figure>

<h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mount &#x2F;dev&#x2F;cdrom &#x2F;cdrom</span><br><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;yum.repos.d&#x2F;dvd.repo#制作yum源文件</span><br><span class="line">[dvd]</span><br><span class="line">name&#x3D;dvd</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;cdrom</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabeld&#x3D;1</span><br><span class="line">[root@localhost ~]# yum install vsftpd –y  #安装vsftpd服务</span><br><span class="line">[root@localhost ~]# yum install ftp –y  #安装vsftpd服务</span><br></pre></td></tr></table></figure>

<h1 id="第三步：重新启动vsftpd服务"><a href="#第三步：重新启动vsftpd服务" class="headerlink" title="第三步：重新启动vsftpd服务"></a>第三步：重新启动vsftpd服务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# service vsftpd restart</span><br></pre></td></tr></table></figure>

<h3 id="配置文件解释："><a href="#配置文件解释：" class="headerlink" title="配置文件解释："></a>配置文件解释：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vi &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br><span class="line">改：anonymous_enable&#x3D;NO  #不允许匿名用户登录  YES 则匿名用户可以登录</span><br><span class="line">改：anon_upload_enable&#x3D;YES#把这行的注释去掉  允许匿名用户上传文件 NO 则是不允许上传文件</span><br><span class="line">改：anon_mkdir_write_enable&#x3D;YES #将这行的注释去掉允许匿名用户创建文件夹 NO 则是不允许创建文件夹</span><br><span class="line">添加：</span><br><span class="line">anon_world_readable_only&#x3D;NO</span><br><span class="line">此命令的默认值为YES，表示仅当所有用户对该文件都拥有读权限时，才允许</span><br><span class="line">匿名用户下载该文件；此处为NO，则允许匿名用户下载不具有全部读权限的文件</span><br><span class="line">anon_other_write_enable&#x3D;YES</span><br><span class="line">允许匿名用户改名和删除文件</span><br><span class="line">max_clients&#x3D;100</span><br><span class="line">设置同时连接FTP服务器的并发用户为100</span><br><span class="line">max_per_ip&#x3D;2</span><br><span class="line">设置每个用户同一时间段并发下载线程数为2，同时只能下载两个文件</span><br><span class="line">anon_max_rate&#x3D;20000</span><br><span class="line">设置匿名用户最大的传输速率为20kbit&#x2F;s</span><br><span class="line">改：chown_uploads&#x3D;YES  #将这行注释去掉 允许匿名用户修改上传文件的所有权</span><br><span class="line">chown_username&#x3D;cmx1 #将这行注释去掉 匿名用户上传的文件的所有者改为bob</span><br><span class="line">改：ascii_upload_enable&#x3D;YES #将注释去掉 允许ASCII格式来上传文件</span><br><span class="line">ascii_download_enable&#x3D;YES #将注释去掉 允许ASCII格式来下载文件</span><br><span class="line">改：ftpd_banner&#x3D;Hi,Welcome to FTP service. #将这行注释去掉设置ftp服务器的欢迎信息</span><br><span class="line">tcp_wrappers&#x3D;YES</span><br><span class="line">设置采用tcp_wrappers来实现来对主机的访问控制，具体控制功能由&#x2F;etc&#x2F;hosts.allow</span><br><span class="line">文件来实现</span><br><span class="line">guest_enable&#x3D;YES</span><br><span class="line">激活虚拟用户登录功能</span><br><span class="line">guest_username&#x3D;virtuser</span><br><span class="line">指定虚拟用户所对应的真实含义</span><br><span class="line">pam_service_name&#x3D;vsftpd.virtual</span><br><span class="line">修改源文件中的pam_service_name&#x3D;vsftpd.virtual的值   (认证文件自己要创建的,已经定义过了) .</span><br></pre></td></tr></table></figure>

<p>更改主配置文件完毕!</p>
<h2 id="重启ftp服务器"><a href="#重启ftp服务器" class="headerlink" title="重启ftp服务器"></a>重启ftp服务器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# service vsftpd restart</span><br></pre></td></tr></table></figure>

<h1 id="第一个实验：使用匿名账号登录"><a href="#第一个实验：使用匿名账号登录" class="headerlink" title="第一个实验：使用匿名账号登录"></a>第一个实验：使用匿名账号登录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">匿名账号默认：ftp</span><br><span class="line">匿名账号密码：ftp</span><br><span class="line">修改配置文件： </span><br><span class="line">[root@ns Packages]# vi &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br><span class="line">anon_upload_enable&#x3D;YES   </span><br><span class="line">anon_mkdir_write_enable&#x3D;YES</span><br><span class="line">将以上两行注释去掉 让匿名用户可以上传和下载文件</span><br><span class="line">chown_uploads&#x3D;YES #将这行注释去掉,允许匿名上传者拥有修改文件所有权</span><br><span class="line">chown_username&#x3D;cmx1  #将这行注释去掉, 匿名用户上传的文件的所有者改为cmx1  这用户必须要存在  文件夹权限和属组也要做好才有用!</span><br><span class="line">修改了配置文件 重启服务器</span><br><span class="line">Service vsftpd restart</span><br><span class="line">我ftp服务器地址为192.168.1.118</span><br></pre></td></tr></table></figure>

<h2 id="测试：默认匿名用户名：ftp-匿名用户密码：ftp"><a href="#测试：默认匿名用户名：ftp-匿名用户密码：ftp" class="headerlink" title="测试：默认匿名用户名：ftp 匿名用户密码：ftp"></a>测试：默认匿名用户名：ftp 匿名用户密码：ftp</h2><img src="https://gitee.com/laosuye/TC/raw/master/20200527001440.png" style="zoom:150%;">

<h1 id="第二个实验：独立的两个用户ftp文件夹"><a href="#第二个实验：独立的两个用户ftp文件夹" class="headerlink" title="第二个实验：独立的两个用户ftp文件夹"></a>第二个实验：独立的两个用户ftp文件夹</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名：cmx1 密码:123456</span><br><span class="line">用户名：cmx2 密码:123456</span><br></pre></td></tr></table></figure>

<h4 id="进入终端："><a href="#进入终端：" class="headerlink" title="进入终端："></a>进入终端：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# useradd cmx1   #创建用户</span><br><span class="line">[root@ns ~]# useradd cmx2</span><br><span class="line">[root@ns ~]# passwd cmx1    #修改口令</span><br><span class="line">[root@ns ~]# passwd cmx2</span><br><span class="line">[root@ns ~]# mkdir -m 777 &#x2F;home&#x2F;cmx1&#x2F;ftp   #赋予文件夹最大权限</span><br><span class="line">[root@ns ~]# chmod 755 &#x2F;home&#x2F;cmx1   #普通用户拥有对此文件夹所有权,其他用户只能读与执行.不能写</span><br><span class="line">[root@ns ~]# chown cmx1:cmx1 &#x2F;home&#x2F;cmx1&#x2F;ftp   #更改文件夹的属主属组为刚创的普通用户cmx1</span><br><span class="line">[root@ns ~]# mkdir -m 777 &#x2F;home&#x2F;cmx2&#x2F;ftp</span><br><span class="line">[root@ns ~]# chmod 755 &#x2F;home&#x2F;cmx2</span><br><span class="line">[root@ns ~]# chown cmx2:cmx2 &#x2F;home&#x2F;cmx2&#x2F;ftp</span><br></pre></td></tr></table></figure>

<h4 id="接下来修改主配置文件："><a href="#接下来修改主配置文件：" class="headerlink" title="接下来修改主配置文件："></a>接下来修改主配置文件：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br><span class="line">anonymous_enable&#x3D;NO  #将匿名登录改为不允许,NO  YES是允许</span><br><span class="line">xferlog_file&#x3D;&#x2F;var&#x2F;log&#x2F;xferlog  #将这行注释去掉 日志文件存放的位置!</span><br><span class="line">idle_session_timeout&#x3D;600   #用户登录超时不能超过600秒！</span><br><span class="line">data_connection_timeout&#x3D;120  #数据链接超时不能超过120秒！</span><br><span class="line">ascii_upload_enable&#x3D;YES</span><br><span class="line">ascii_download_enable&#x3D;YES</span><br><span class="line">将这两行注释去掉  使用ascii码形式上传和下载文件！</span><br><span class="line">chroot_local_user&#x3D;YES  </span><br><span class="line">个人主页的目录控制，会隐藏真实目录,匿名用户自带目录控制隐藏真实目录.</span><br><span class="line">userlist_deny&#x3D;NO  </span><br><span class="line">添加这条指令是账号控制,现在只有user_list(白名单)文件下的写入的用户能登入ftp服务器。</span><br></pre></td></tr></table></figure>

<h4 id="现在在白名单下添加用户-才能访问ftp服务器"><a href="#现在在白名单下添加用户-才能访问ftp服务器" class="headerlink" title="现在在白名单下添加用户 才能访问ftp服务器"></a>现在在白名单下添加用户 才能访问ftp服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;vsftpd&#x2F;user_list(格式顶格写，里面不允许注释,添加的就是我们刚创建的用户)</span><br><span class="line">cmx1   </span><br><span class="line">cmx2</span><br><span class="line">修改了配置文件 ：重启服务器</span><br><span class="line">[root@ns ~]# service vsftpd restart</span><br></pre></td></tr></table></figure>

<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><img src="https://gitee.com/laosuye/TC/raw/master/20200527001457.png" style="zoom:150%;">

<p>恭喜你个人用户的ftp已完成!</p>
<h1 id="第三个实验："><a href="#第三个实验：" class="headerlink" title="第三个实验："></a>第三个实验：</h1><h2 id="ftp服务器对网络的控制"><a href="#ftp服务器对网络的控制" class="headerlink" title="ftp服务器对网络的控制"></a>ftp服务器对网络的控制</h2><p>我ftp服务器地址为192.168.1.118<br>我ftp客户端地址为 192.168.1.188<br>进入终端：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;hosts.allow  #修改配置文件</span><br><span class="line">vsftpd:192.168.1.188 192.168.1.189:DENY   #拒绝.188 和 .189的主机访问ftp服务器</span><br><span class="line">vsftpd:192.168.1.0    #允许192.168.1.0这个网段的主机访问ftp服务器</span><br><span class="line">修改了配置文件：重启vsftp服务器</span><br><span class="line">[root@ns ~]# service vsftpd restart</span><br></pre></td></tr></table></figure>

<h2 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h2><img src="https://gitee.com/laosuye/TC/raw/master/20200527001506.png" style="zoom:200%;">

<p>登录不了 ，恭喜你网络控制搭建成功！</p>
<h4 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h4><img src="https://gitee.com/laosuye/TC/raw/master/20200527001514.png" style="zoom:150%;">

<p>又能登录了所以网络控制成功！</p>
<h1 id="第四个实验：做虚拟账号登录ftp服务器-账号是不存在的-保护了ftp的安全"><a href="#第四个实验：做虚拟账号登录ftp服务器-账号是不存在的-保护了ftp的安全" class="headerlink" title="第四个实验：做虚拟账号登录ftp服务器 账号是不存在的 保护了ftp的安全"></a>第四个实验：做虚拟账号登录ftp服务器 账号是不存在的 保护了ftp的安全</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">虚拟账号：chenchen1</span><br><span class="line">虚拟账号口令：995523</span><br><span class="line">虚拟账号：chenchen2</span><br><span class="line">虚拟账号口令：995523</span><br><span class="line">虚拟账号：chenchen3</span><br><span class="line">虚拟账号口令：995523</span><br><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;virtuserdb.txt   #制作虚拟账号口令存放的文件</span><br><span class="line">奇数行是账号,偶数行是密码！</span><br><span class="line">chenchen1</span><br><span class="line">995523</span><br><span class="line">chenchen2</span><br><span class="line">995523</span><br><span class="line">chenchen3</span><br><span class="line">995523</span><br><span class="line">执行一下命令生成虚拟数据库文件</span><br><span class="line">[root@ns ~]# db_load -T -t hash -f &#x2F;etc&#x2F;virtuserdb.txt &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.db</span><br><span class="line">这个命令作用是把&#x2F;etc&#x2F;virtuserdb.txt的文件导入到&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.db数据库文件里去.</span><br><span class="line">定义数据库vsftpd.db的权限  普通用户对此文件可读可写！</span><br><span class="line">[root@ns ~]# chmod 600 &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.db</span><br></pre></td></tr></table></figure>

<h2 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建PAM认证文件.</span><br><span class="line">&#x2F;etc&#x2F;pam.d&#x2F;vsftpd.virtual</span><br><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;pam.d&#x2F;vsftpd.virtual</span><br><span class="line">auth    required &#x2F;lib&#x2F;security&#x2F;pam_userdb.so db&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd</span><br><span class="line">account required &#x2F;lib&#x2F;security&#x2F;pam_userdb.so db&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd</span><br><span class="line">注意：以上两条代码为认证规则</span><br><span class="line">     第一条规则的功能是利用pam_userdb.so模块来进行身份认证,主要是接受用户名和口令,进而对该用户的口令进行口令进行认证,并负责设置用户的一些秘密信息.其中采用的数据库是&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.db文件(此处省略文件名后面的扩展名.db)</span><br><span class="line">    第二条规则的功能是检查帐号是否被允许登录系统,帐号是否已经过期,帐号登录是否有时间段的限制等.设置在进行授权时采用的数据库也是这个数据库也是etc&#x2F;vsftpd&#x2F;vsftpd.db。</span><br></pre></td></tr></table></figure>

<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步:"></a>第三步:</h2><p>创建虚拟用户所对应的真实帐号及所登录的目录,并设置相应的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# useradd -d &#x2F;var&#x2F;virtuser virtuser  #添加账号与更改账号路径,默认是在&#x2F;home目录下</span><br><span class="line">[root@ns ~]# chmod 744 &#x2F;var&#x2F;virtuser  #普通用户拥有所有权,其他用户同组用户只能读</span><br><span class="line">第四步:</span><br><span class="line">编辑 &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf 配置文件,增加以下内容(顶格写,等号两边不允许空格):</span><br><span class="line">guest_enable&#x3D;YES</span><br><span class="line">激活虚拟用户登录功能</span><br><span class="line">guest_username&#x3D;virtuser</span><br><span class="line">指定虚拟用户所对应的真实含义</span><br><span class="line">pam_service_name&#x3D;vsftpd.virtual</span><br><span class="line">修改源文件中的pam_service_name&#x3D;vsftpd.virtual的值   (认证文件自己要创建的,已经定义过了) .</span><br></pre></td></tr></table></figure>

<p>因为我们帐号控制 userlist功能也就是白名单 所以我们的虚拟帐号要加入这个配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;vsftpd&#x2F;user_list  #在配置文件添加虚拟帐号 就是 刚刚创建得虚拟账号 以下内容</span><br><span class="line">chenchen1</span><br><span class="line">chenchen2</span><br><span class="line">chenchen3</span><br><span class="line">保存后重启服务！</span><br><span class="line">[root@ns ~]# service vsftpd restart</span><br></pre></td></tr></table></figure>

<p>测试：虚拟账号登录成功 .实验搭建成功！</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527001523.png" style="zoom:200%;">

<h1 id="基于ftp服务器端口的控制"><a href="#基于ftp服务器端口的控制" class="headerlink" title="基于ftp服务器端口的控制"></a>基于ftp服务器端口的控制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]#vi &#x2F;etc&#x2F;services</span><br></pre></td></tr></table></figure>

<p>在下面改端口想改啥改啥</p>
<p>要记得端口放行防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# service vsftpd restart (加这个指令后面是端口,自己指的是21)</span><br><span class="line">listen_port&#x3D;21</span><br></pre></td></tr></table></figure>

<p>在windows下输入的格式</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527001532.png" style="zoom:200%;">

<p>自此：Ftp服务器的配置与管理结束！</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>服务器</category>
        <category>Ftp</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>服务器</tag>
        <tag>Ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Gitee搭建个人博客&#39;</title>
    <url>/2024/06/20/Hexo-Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前前后后安装hexo搭建博客也有很多次了，试过在mac环境下，最近又是因为种种原因，在windows下安装了hexo，但是很东西不同之前的mac，踩了很多坑，为了自己以后避免踩坑，所以在这里做个记录，也为了以后有人能用到我这篇文章</p>
<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="1、下载安装Git"><a href="#1、下载安装Git" class="headerlink" title="1、下载安装Git"></a>1、下载安装Git</h3><p>首先去下载<strong>Git</strong>的最新版本</p>
<p>1、<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官方下载</a></p>
<p>2、<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝源下载</a></p>
<p>这里推荐淘宝源下载安装，因为官方下载的速度都是比较慢的，在国内淘宝源下载比较快。</p>
<p>安装方式这里我不做过多的介绍，网上有很多的教程</p>
<h3 id="2、下载安装node-js"><a href="#2、下载安装node-js" class="headerlink" title="2、下载安装node.js"></a>2、下载安装node.js</h3><p>同<strong>git</strong>一样，去下载<strong>node.js</strong>的安装包</p>
<p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">1、官方下载</a></p>
<p><a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">2、淘宝源下载</a></p>
<p>同样推荐淘宝下载，不同于<strong>git</strong>的是，尽可能的不要下载最新的版本，最好是下载一个历史版本的稳定性比较高</p>
<p>安装的话直接是默认的下一步下一步，非常简单</p>
<h2 id="3、一些不错的工具"><a href="#3、一些不错的工具" class="headerlink" title="3、一些不错的工具"></a>3、一些不错的工具</h2><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">Visaual Studio Code</a> 用来编辑<strong>hexo</strong>的配置文件(如果有其他的更好的可以不用这个)</p>
<p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a> 文章采用<strong>markdown</strong>方式编写，这个软件界面简单，写md语法非常好</p>
<h2 id="4、需要用到的框架或者平台"><a href="#4、需要用到的框架或者平台" class="headerlink" title="4、需要用到的框架或者平台"></a>4、需要用到的框架或者平台</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">1、Hexo</a></p>
<p><a href="https://gitee.com/">2、码云(Gitee)</a></p>
<h1 id="二、测试环境"><a href="#二、测试环境" class="headerlink" title="二、测试环境"></a>二、测试环境</h1><p>用<strong>Win+R</strong>打开运行，输入<strong>cmd</strong>并进入cmd</p>
<p><strong>node.js</strong>的检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p><strong>npm</strong>的检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p><strong>Git</strong>的检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p>以上有显示版本号，则说明安装成功</p>
<h1 id="三、hexo的安装"><a href="#三、hexo的安装" class="headerlink" title="三、hexo的安装"></a>三、hexo的安装</h1><p>1、安装之前把下载的源设置成淘宝的源，这样下载速度更快</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>2、全局安装框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>3.1、创建你的博客目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init 你博客文件夹名字</span><br></pre></td></tr></table></figure>

<p>3.2、进入你博客的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 你博客文件夹名字</span><br></pre></td></tr></table></figure>

<p>4、复制文件到你博客的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>5、安装hexo部署插件</p>
<p><strong>cmd</strong>切换到你博客文件夹目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h1 id="四、Git的配置"><a href="#四、Git的配置" class="headerlink" title="四、Git的配置"></a>四、Git的配置</h1><p>用<strong>Win+R</strong>打开运行，输入<strong>cmd</strong>并进入cmd</p>
<p>设置用户名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br></pre></td></tr></table></figure>

<p>设置用户邮箱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;用户邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>生成密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;用户邮箱&quot;</span><br></pre></td></tr></table></figure>

<h1 id="五、-config-yml文件的配置"><a href="#五、-config-yml文件的配置" class="headerlink" title="五、_config.yml文件的配置"></a>五、_config.yml文件的配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;gitee.com&#x2F;hcllmsx&#x2F;hcllmsx.git    #替换成你自己仓库的HTTP URL地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>注意区分，你博客根目录的 _config.yml 文件，和主题根目录的 _config.yml 文件！</p>
<h1 id="六、hexo常用代码"><a href="#六、hexo常用代码" class="headerlink" title="六、hexo常用代码"></a>六、hexo常用代码</h1><p>1、清理缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo c</span><br></pre></td></tr></table></figure>

<p>hexo c是hexo clean的简写</p>
<p>2、生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>hexo g 是 hexo generate的简写</p>
<p>3、在本地隐射(预览)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>hexo s 是 hexo server的简写</p>
<p>4、部署推送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>hexo d 是 hexo depoly的简写</p>
<p>5、新建文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;文章名字&quot;</span><br></pre></td></tr></table></figure>

<p>以上就是关于hexo+gitee搭建博客，下一期会出一篇关于hexo下next的配置详情</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Gitee - 博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Gitee - 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Next 添加 Valine 评论功能</title>
    <url>/2024/06/20/Hexo-Next-%E6%B7%BB%E5%8A%A0-Valine-%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 这家服务提供商，实现Hexo博客文章的浏览数统计功能。</p>
<p><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 是基于 LeanCloud 的评论系统，评论数据都存储在leancloud平台，界面很简单，没有后台，删除和管理评论只能直接操作数据库。</p>
<p>本文用的 Next 版本为 5.1.4，已经合并这个功能，相关代码在<code>themes\next\layout\_third-party\comments\valine.swig</code>，可以不用修改主题模版，直接在<code>_config.yml</code>中配置即可。如果低于这个版本的可以考虑升级或者自己手动修改。</p>
<h1 id="一、配置LeanCloud"><a href="#一、配置LeanCloud" class="headerlink" title="一、配置LeanCloud"></a>一、配置LeanCloud</h1><h3 id="1、创建一个开发版应用（免费）"><a href="#1、创建一个开发版应用（免费）" class="headerlink" title="1、创建一个开发版应用（免费）"></a>1、创建一个开发版应用（免费）</h3><p><a href="https://gitee.com/laosuye/TC/raw/master/20210320235632.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210320235632.png" alt="img"></a></p>
<h3 id="2、设置"><a href="#2、设置" class="headerlink" title="2、设置"></a>2、设置</h3><p>在<code>LeanCloud &gt; 设置 &gt; 安全中心</code>中，把除<code>数据存储</code>外其他选项都关闭。并将你的博客域名添加到<code>Web 安全域名</code>中：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210320235805.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210320235805.png" alt="img"></a></p>
<h3 id="3、创建Class"><a href="#3、创建Class" class="headerlink" title="3、创建Class"></a>3、创建Class</h3><h5 id="Comment实例在配置好next后会自动生成"><a href="#Comment实例在配置好next后会自动生成" class="headerlink" title="Comment实例在配置好next后会自动生成"></a>Comment实例在配置好next后会自动生成</h5><p>在<code>LeanCloud &gt; 存储 &gt; 创建Class</code>，选择<code>无限制的Class</code>并创建：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210320235919.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210320235919.png" alt="img"></a></p>
<h3 id="4、修改next配置"><a href="#4、修改next配置" class="headerlink" title="4、修改next配置"></a>4、修改next配置</h3><p>在<code>LeanCloud &gt; 设置 &gt; 应用 Key</code>中，找到<code>App ID</code>和<code>App Key</code>。之后修改 Next 的配置文件<code>_config.yml</code>如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https:&#x2F;&#x2F;leancloud.cn</span><br><span class="line"># more info please open https:&#x2F;&#x2F;valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: xxxxxxxxx  # your leancloud application appid</span><br><span class="line">  appkey: xxxxxxxxx # your leancloud application appkey</span><br><span class="line">  notify: true # mail notifier , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki</span><br><span class="line">  verify: true # Verification code</span><br><span class="line">  placeholder:  # comment box placeholder</span><br><span class="line">  avatar:  # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure>

<ul>
<li>enable: 开启评论功能</li>
<li>appid: leancloud 的 appid</li>
<li>appkey: leancloud 的 appkey</li>
<li>notify: 开启评论提醒，见下文</li>
<li>verify: 评论前开启验证</li>
<li>placeholder: 占位</li>
<li>avatar: 头像，见下文</li>
<li>guest_info: 评论框的 header 内容</li>
<li>pageSize: 分页</li>
</ul>
<p>之后重新执行<code>hexo g -d</code>就可以看到文章下的评论框了：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321000223.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321000223.png" alt="img"></a></p>
<p>评论成功后，在相应的表里能看新插入的数据，可以删除编辑：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321000258.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321000258.png" alt="img"></a></p>
<h3 id="5、其他"><a href="#5、其他" class="headerlink" title="5、其他"></a>5、其他</h3><p>可在文章模板<code>scaffolds/post.md</code> 或文章头部中设置<code>comments</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">comments: true</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>在<code>source/categories/index.md</code>和<code>source/tags/index.md</code>里要禁用<code>comments</code>，否则分类和标签页面会显示评论框：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-12-06 22:54:28</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>如果明明有评论，但标题下方的评论数却为0，如图：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321000425.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321000425.png" alt="img"></a></p>
<p>那么打开浏览器调试工具看看这个标签的类名是不是包含<code>valine-comment-count</code>：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321000608.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321000608.png" alt="img"></a></p>
<p>如上如所示，类名是<code>fb-comments-count</code>，说明模板渲染错了。打开<code>themes\next\layout\_macro\post.swig</code>找到下面的部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; facebook</span><br><span class="line">&#123;% elseif theme.facebook_comments_plugin.enable %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-comments-count&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fa fa-comment-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot; itemprop&#x3D;&quot;discussionUrl&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-comments-count fb-comments-count&quot; data-href&#x3D;&quot;&#123;&#123; post.permalink &#125;&#125;&quot; itemprop&#x3D;&quot;commentCount&quot;&gt;0&lt;&#x2F;span&gt; comments</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 省略。。。。。。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; valine</span><br><span class="line">&#123;% elseif theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-comments-count&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;fa fa-comment-o&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot; itemprop&#x3D;&quot;discussionUrl&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;post-comments-count valine-comment-count&quot; data-xid&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; itemprop&#x3D;&quot;commentCount&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>其实是根据<code>_config.yml</code>里的主题配置用<code>if...else...</code>来渲染模板。把配置文件里<code>theme.facebook_comments_plugin.enable</code>改为<code>false</code>，则<code>facebook</code>那部分不会渲染：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">facebook_comments_plugin:</span><br><span class="line">  enable:       false</span><br><span class="line">  num_of_posts: 10    # min posts num is 1</span><br><span class="line">  width:        100%  # default width is 550px</span><br><span class="line">  scheme:       light # default scheme is light (light or dark)</span><br></pre></td></tr></table></figure>

<p>刷新后<code>valine</code>那部分渲染出来了，可以看到评论数。</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321000724.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321000724.png" alt="img"></a></p>
<h1 id="二、头像配置"><a href="#二、头像配置" class="headerlink" title="二、头像配置"></a>二、头像配置</h1><p><strong>参考<a href="https://valine.js.org/avatar.html" target="_blank" rel="noopener">Valine评论系统中头像的配置</a></strong></p>
<p>上面<code>valine &gt; avatar</code>字段用来设置评论头像，可选值如下:</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321000921.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321000921.png" alt="img"></a></p>
<p>之后注册登录<a href="https://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a>，并设置头像。</p>
<p>之后在<code>Next</code>配置文件中增加<code>avatar_cdn</code>字段，如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: xxxxxxxxx</span><br><span class="line">  appkey: xxxxxxxxx</span><br><span class="line">  notify: true # mail notifier , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki</span><br><span class="line">  verify: true # Verification code</span><br><span class="line">  placeholder:  # comment box placeholder</span><br><span class="line">  avatar:  # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br><span class="line">  avatar_cdn: https:&#x2F;&#x2F;www.gravatar.com&#x2F;avatar&#x2F;</span><br></pre></td></tr></table></figure>

<p>之后修改<code>Valine</code>模板文件<code>/themes/next/layout/_third-party/comments/valine.swig</code>，末尾增加<code>avatar_cnd</code>字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Valine(&#123;</span><br><span class="line">    el: &#39;#comments&#39; ,</span><br><span class="line">    verify: &#123;&#123; theme.valine.verify &#125;&#125;,</span><br><span class="line">    notify: &#123;&#123; theme.valine.notify &#125;&#125;,</span><br><span class="line">    appId: &#39;&#123;&#123; theme.valine.appid &#125;&#125;&#39;,</span><br><span class="line">    appKey: &#39;&#123;&#123; theme.valine.appkey &#125;&#125;&#39;,</span><br><span class="line">    placeholder: &#39;&#123;&#123; theme.valine.placeholder &#125;&#125;&#39;,</span><br><span class="line">    avatar:&#39;&#123;&#123; theme.valine.avatar &#125;&#125;&#39;,</span><br><span class="line">    guest_info:guest,</span><br><span class="line">    pageSize:&#39;&#123;&#123; theme.valine.pageSize &#125;&#125;&#39; || 10,</span><br><span class="line">    avatar_cdn:&#39;&#123;&#123; theme.valine.avatar_cdn &#125;&#125;&#39;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>刷新头像变成自定义的了：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321001319.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321001319.png" alt="img"></a></p>
<h1 id="三、邮件配置"><a href="#三、邮件配置" class="headerlink" title="三、邮件配置"></a>三、邮件配置</h1><h3 id="1、官方邮件提醒"><a href="#1、官方邮件提醒" class="headerlink" title="1、官方邮件提醒"></a>1、官方邮件提醒</h3><p>参考 <strong><a href="https://valine.js.org/notify.html" target="_blank" rel="noopener">Valine 评论系统中的邮件提醒设置</a></strong></p>
<p><strong>注意：目前邮件提醒正处于测试阶段，仅在子级对存在邮件地址的父级发表评论时发送邮件</strong></p>
<p><code>Valine</code>官方提供的邮件提醒功能是基于<code>Leancloud</code>的密码重置邮件提醒。所以要<code>开启email通知</code>除了修改配置文件<code>valine &gt; notify</code>为<code>true</code>外，还需对<code>LeanCloud &gt; 设置 &gt; 邮件模板 &gt; 用于重置密码的邮件主题</code>进行修改。如下图：</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321001435.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321001435.png" alt="img"></a></p>
<p>可参考以下内容修改并保存，修改后的内容会被插入提醒邮件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 邮件主题</span><br><span class="line">你在&#123;&#123;appname&#125;&#125;的评论收到了新的回复</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 内容</span><br><span class="line">&lt;p&gt;Hi, &#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;luanzhuxian.github.io&quot; style&#x3D;&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;&gt;马上查看&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p>之后对一级评论回复并同时填写邮箱的话，就能收到邮件提醒了。</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210321001527.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210321001527.png" alt="img"></a></p>
<h1 id="四、第三方支持"><a href="#四、第三方支持" class="headerlink" title="四、第三方支持"></a>四、第三方支持</h1><p>还可以使用更完善的第三方邮件提醒：<strong><a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a></strong><br><a href="https://deserts.io/valine-admin-document/" target="_blank" rel="noopener">参考</a><br><a href="https://github.98.tn/hexo-valine-admin/" target="_blank" rel="noopener">参考</a></p>
<p>其中的设置云引擎的自定义环境变量：</p>
<ul>
<li>SITE_NAME : 网站名称</li>
<li>SITE_URL : 网站地址, 最后不要加 /</li>
<li>SMTP_USER : SMTP 服务用户名，一般为邮箱地址</li>
<li>SMTP_PASS : SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</li>
<li>SMTP_SERVICE : 邮件服务提供商</li>
<li>SENDER_NAME : 寄件人名称</li>
<li>TO_EMAIL：这个是填收邮件提醒的邮箱地址，若没有这个字段，则将邮件发到 SMTP_USER</li>
<li>TEMPLATE_NAME：设置提醒邮件的主题，目前内置了两款主题，分别为 default 与 rainbow。默认为 default</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>next - 博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>next - 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题--next主题的配置</title>
    <url>/2024/06/20/Hexo%E4%B8%BB%E9%A2%98-next%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="安装-NexT"><a href="#安装-NexT" class="headerlink" title="安装 NexT"></a>安装 NexT</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新， 而不用再次下载压缩包替换。</p>
<ul>
<li><a href="http://theme-next.iissnan.com/getting-started.html#clone" target="_blank" rel="noopener">克隆最新版本</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html#stable" target="_blank" rel="noopener">下载稳定版本</a></li>
</ul>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd 站点所在目录</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>如果你对 Git 感兴趣，可以通过《Pro Git》这本书来学习。</p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>
<p>启用 NexT 主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>
<h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;0.0.0.0:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p>
<p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210313140050.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210313140050.png" alt="img"></a></p>
<p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><h3 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h3><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>Scheme 的切换通过更改 <strong>主题配置文件</strong>，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 <code>#</code> 去除即可。</p>
<p>选择 Pisces Scheme</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure>

<h3 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h3><p>编辑 <strong>站点配置文件</strong>， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure>

<p>目前 NexT 支持的语言如以下表格所示：</p>
<p>目前 NexT 支持的语言如以下表格所示：</p>
<table>
<thead>
<tr>
<th align="left">语言</th>
<th align="left">代码</th>
<th align="left">设定示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">English</td>
<td align="left"><code>en</code></td>
<td align="left"><code>language: en</code></td>
</tr>
<tr>
<td align="left">简体中文</td>
<td align="left"><code>zh-Hans</code></td>
<td align="left"><code>language: zh-Hans</code></td>
</tr>
<tr>
<td align="left">Français</td>
<td align="left"><code>fr-FR</code></td>
<td align="left"><code>language: fr-FR</code></td>
</tr>
<tr>
<td align="left">Português</td>
<td align="left"><code>pt</code></td>
<td align="left"><code>language: pt</code> or <code>language: pt-BR</code></td>
</tr>
<tr>
<td align="left">繁體中文</td>
<td align="left"><code>zh-hk</code> 或者 <code>zh-tw</code></td>
<td align="left"><code>language: zh-hk</code></td>
</tr>
<tr>
<td align="left">Русский язык</td>
<td align="left"><code>ru</code></td>
<td align="left"><code>language: ru</code></td>
</tr>
<tr>
<td align="left">Deutsch</td>
<td align="left"><code>de</code></td>
<td align="left"><code>language: de</code></td>
</tr>
<tr>
<td align="left">日本語</td>
<td align="left"><code>ja</code></td>
<td align="left"><code>language: ja</code></td>
</tr>
<tr>
<td align="left">Indonesian</td>
<td align="left"><code>id</code></td>
<td align="left"><code>language: id</code></td>
</tr>
<tr>
<td align="left">Korean</td>
<td align="left"><code>ko</code></td>
<td align="left"><code>language: ko</code></td>
</tr>
</tbody></table>
<h3 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h3><p>菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。</p>
<p>编辑 <strong>主题配置文件</strong>，修改以下内容：</p>
<ol>
<li><p>设定菜单内容，对应的字段是 <code>menu</code>。 菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p>
<p>菜单示例配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  #about: &#x2F;about</span><br><span class="line">  #categories: &#x2F;categories</span><br><span class="line">  tags: &#x2F;tags</span><br><span class="line">  #commonweal: &#x2F;404.html</span><br></pre></td></tr></table></figure>

<p>若你的站点运行在子目录中，请将链接前缀的 <code>/</code> 去掉</p>
<p>NexT 默认的菜单项有（标注 的项表示需要手动创建这个页面）：</p>
<table>
<thead>
<tr>
<th align="left">键值</th>
<th align="left">设定值</th>
<th align="left">显示文本（简体中文）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">home</td>
<td align="left"><code>home: /</code></td>
<td align="left">主页</td>
</tr>
<tr>
<td align="left">archives</td>
<td align="left"><code>archives: /archives</code></td>
<td align="left">归档页</td>
</tr>
<tr>
<td align="left">categories</td>
<td align="left"><code>categories: /categories</code></td>
<td align="left">分类页</td>
</tr>
<tr>
<td align="left">tags</td>
<td align="left"><code>tags: /tags</code></td>
<td align="left">标签页</td>
</tr>
<tr>
<td align="left">about</td>
<td align="left"><code>about: /about</code></td>
<td align="left">关于页面</td>
</tr>
<tr>
<td align="left">commonweal</td>
<td align="left"><code>commonweal: /404.html</code></td>
<td align="left">公益 404</td>
</tr>
</tbody></table>
</li>
<li><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code>（<code>{language}</code> 为你所使用的语言）。</p>
<p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件<code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加一项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  something: 有料</span><br></pre></td></tr></table></figure>
</li>
<li><p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。 此设定格式是 <code>item name: icon name</code>，其中 <code>item name</code> 与上一步所配置的菜单名字对应，<code>icon name</code> 是 Font Awesome 图标的 名字。而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
<p>菜单图标配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mapping.</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure>

<p>在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。</p>
<p>请注意键值（如 <code>home</code>）的大小写要严格匹配</p>
</li>
</ol>
<h3 id="设置-侧栏"><a href="#设置-侧栏" class="headerlink" title="设置 侧栏"></a>设置 侧栏</h3><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <strong>主题配置文件</strong> 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>
<ol>
<li><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。影响版本<strong>5.0.0</strong>及更低版本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：</p>
<ul>
<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li><code>always</code> - 在所有页面中都显示</li>
<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>
<li><code>remove</code> - 完全移除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure>

<p>已知侧栏在 <code>use motion: false</code> 的情况下不会展示。 影响版本<strong>5.0.0</strong>及更低版本。</p>
</li>
</ol>
<h3 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h3><p>编辑 <strong>主题配置文件</strong>， 修改字段 <code>avatar</code>， 值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<table>
<thead>
<tr>
<th align="left">地址</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">完整的互联网 URI</td>
<td align="left"><code>http://example.com/avatar.png</code></td>
</tr>
<tr>
<td align="left">站点内的地址</td>
<td align="left">将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在） 配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下 配置为：<code>avatar: /images/avatar.png</code></td>
</tr>
</tbody></table>
<p>头像设置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar: http:&#x2F;&#x2F;example.com&#x2F;avatar.png</span><br></pre></td></tr></table></figure>

<h3 id="设置-作者昵称"><a href="#设置-作者昵称" class="headerlink" title="设置 作者昵称"></a>设置 作者昵称</h3><p>编辑 <strong>站点配置文件</strong>， 设置 <code>author</code> 为你的昵称。</p>
<h3 id="站点描述"><a href="#站点描述" class="headerlink" title="站点描述"></a>站点描述</h3><p>编辑 <strong>站点配置文件</strong>， 设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 <strong>主题配置文件</strong>，设定 <code>rss</code> 字段的值：</p>
<ul>
<li><code>false</code>：禁用 RSS，不在页面上显示 RSS 连接。</li>
<li>留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 插件。</li>
<li>具体的链接地址：适用于已经烧制过 Feed 的情形。</li>
</ul>
<h3 id="添加「标签」页面"><a href="#添加「标签」页面" class="headerlink" title="添加「标签」页面"></a>添加「标签」页面</h3><p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签测试文章</span><br><span class="line">tags:</span><br><span class="line">  - Testing</span><br><span class="line">  - Another Tag</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>请参阅 <a href="https://hexo.io/zh-cn/docs/front-matter.html#分类和标签" target="_blank" rel="noopener">Hexo 的分类与标签文档</a>，了解如何为文章添加标签或者分类。</p>
<ul>
<li><a href="http://theme-next.iissnan.com/theme-settings.html#new-page-tags" target="_blank" rel="noopener">新建页面</a></li>
<li><a href="http://theme-next.iissnan.com/theme-settings.html#set-page-tags" target="_blank" rel="noopener">设置页面类型</a></li>
<li><a href="http://theme-next.iissnan.com/theme-settings.html#update-menu-for-tags-page" target="_blank" rel="noopener">修改菜单</a></li>
</ul>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>tags</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code>，如：</p>
<p>禁用评论示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="添加「分类」页面"><a href="#添加「分类」页面" class="headerlink" title="添加「分类」页面"></a>添加「分类」页面</h3><p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类测试文章</span><br><span class="line">categories: Testing</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>请参阅 <a href="https://hexo.io/zh-cn/docs/front-matter.html#分类和标签" target="_blank" rel="noopener">Hexo 的分类与标签文档</a>，了解如何为文章添加标签或者分类。</p>
<ul>
<li><a href="http://theme-next.iissnan.com/theme-settings.html#new-page-categories" target="_blank" rel="noopener">新建页面</a></li>
<li><a href="http://theme-next.iissnan.com/theme-settings.html#set-page-categories" target="_blank" rel="noopener">设置页面类型</a></li>
<li><a href="http://theme-next.iissnan.com/theme-settings.html#update-menu-for-categories-page" target="_blank" rel="noopener">修改菜单</a></li>
</ul>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>categories</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 <code>comments</code> 并将值设置为 <code>false</code>，如：</p>
<p>禁用评论示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p><strong>注意：</strong> 此特性在版本 <strong>5.0.1</strong> 中引入，要使用此功能请确保所使用的 NexT 版本在此之后</p>
<p>为了解决 <a href="https://www.google.com/fonts" target="_blank" rel="noopener">Google Fonts API</a> 不稳定的问题，NexT 在 5.0.1 中引入此特性。 通过此特性，你可以指定所使用的字体库外链地址；与此同时，NexT 开放了 5 个特定范围的字体设定，他们是：</p>
<ul>
<li>全局字体：定义的字体将在全站范围使用</li>
<li>标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6）</li>
<li>文章字体：文章所使用的字体</li>
<li>Logo字体：Logo 所使用的字体</li>
<li>代码字体： 代码块所使用的字体</li>
</ul>
<p>各项所指定的字体将作为首选字体，当他们不可用时会自动 Fallback 到 NexT 设定的基础字体组：</p>
<ul>
<li>非代码类字体：Fallback 到 <code>&quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif</code></li>
<li>代码类字体： Fallback 到 <code>consolas, Menlo, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, monospace</code></li>
</ul>
<p>另外，每一项都有一个额外的 <code>external</code> 属性，此属性用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小）。</p>
<p>配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # 外链字体库地址，例如 &#x2F;&#x2F;fonts.googleapis.com (默认值)</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # 全局字体，应用在 body 元素上</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monda</span><br><span class="line"></span><br><span class="line">  # 标题字体 (h1, h2, h3, h4, h5, h6)</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Roboto Slab</span><br><span class="line"></span><br><span class="line">  # 文章字体</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Logo 字体</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lobster Two</span><br><span class="line">    size: 24</span><br><span class="line"></span><br><span class="line">  # 代码字体，应用于 code 以及代码块</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: PT Mono</span><br></pre></td></tr></table></figure>

<h3 id="加入站点内容搜索功能"><a href="#加入站点内容搜索功能" class="headerlink" title="加入站点内容搜索功能"></a>加入站点内容搜索功能</h3><p>本站点使用的是<code>Local Search</code>。加入站点内容搜索功能步骤如下：</p>
<ul>
<li>安装hexo-generator-searchdb</li>
</ul>
<p><code>$ npm install hexo-generator-searchdb --save</code><br><strong>注意</strong>：安装时应在站点根目录下，即myBlog目录下</p>
<ul>
<li>在站点_config.yml尾部添加search字段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br><span class="line">limit: 10000</span><br></pre></td></tr></table></figure>

<h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><p>NexT主旨在于简洁优雅且易于使用，主题本身提供了三种样式供用户选择，但色彩过于单一，今天为大家介绍如何修改主题的颜色和增加背景图片。<br>打开<code>hexo/themes/next/source/css/_variables/base.styl</code>找到Colors代码段，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Colors</span><br><span class="line">&#x2F;&#x2F; colors for use across theme.</span><br><span class="line">&#x2F;&#x2F; --------------------------------------------------</span><br><span class="line">  $whitesmoke   &#x3D; #f5f5f5</span><br><span class="line">  $gainsboro    &#x3D; #eee  &#x2F;&#x2F;这个是边栏头像外框的颜色，</span><br><span class="line">  $gray-lighter &#x3D; #ddd  &#x2F;&#x2F;文章中插入图片边框颜色</span><br><span class="line">  $grey-light   &#x3D; #ccc  &#x2F;&#x2F;文章之间分割线、下划线颜色</span><br><span class="line">  $grey         &#x3D; #bbb  &#x2F;&#x2F;页面选中圆点颜色</span><br><span class="line">  $grey-dark    &#x3D; #999</span><br><span class="line">  $grey-dim     &#x3D; #666 &#x2F;&#x2F;侧边栏目录字体颜色</span><br><span class="line">  $black-light  &#x3D; #555 &#x2F;&#x2F;修改文章字体颜色</span><br><span class="line">  $black-dim    &#x3D; #333</span><br><span class="line">  $black-deep   &#x3D; #495a80  &#x2F;&#x2F;修改主题的颜色，。</span><br><span class="line">  $red          &#x3D; #ff2a2a</span><br><span class="line">  $blue-bright  &#x3D; #87daff</span><br><span class="line">  $blue         &#x3D; #0684bd</span><br><span class="line">  $blue-deep    &#x3D; #262a30</span><br><span class="line">  $orange       &#x3D; #F39D01 &#x2F;&#x2F;浏览文章时，目录选中的颜色</span><br></pre></td></tr></table></figure>

<p>其他的可以自行更改，看看效果</p>
<p>其他的可以自行更改，看看效果</p>
<h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 <strong>主题配置文件</strong> 中。</p>
<ol>
<li><p>链接放置在 <code>social</code> 字段下，一行一个链接。其键值格式是 <code>显示文本: 链接地址</code>。</p>
<p>配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Social links</span><br><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;your-user-name</span><br><span class="line">  Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;your-user-name</span><br><span class="line">  微博: http:&#x2F;&#x2F;weibo.com&#x2F;your-user-name</span><br><span class="line">  豆瓣: http:&#x2F;&#x2F;douban.com&#x2F;people&#x2F;your-user-name</span><br><span class="line">  知乎: http:&#x2F;&#x2F;www.zhihu.com&#x2F;people&#x2F;your-user-name</span><br><span class="line">  # 等等</span><br></pre></td></tr></table></figure>
</li>
<li><p>设定链接的图标，对应的字段是 <code>social_icons</code>。其键值格式是 <code>匹配键: Font Awesome 图标名称</code>， <code>匹配键</code> 与上一步所配置的链接的 <code>显示文本</code> 相同（大小写严格匹配），<code>图标名称</code> 是 Font Awesome 图标的名字（不必带 <code>fa-</code> 前缀）。<code>enable</code> 选项用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
<p>配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Social Icons</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings</span><br><span class="line">  GitHub: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  微博: weibo</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="开启打赏功能-由-habren-贡献"><a href="#开启打赏功能-由-habren-贡献" class="headerlink" title="开启打赏功能 由 habren 贡献"></a>开启打赏功能 由 <a href="https://github.com/iissnan/hexo-theme-next/pull/687" target="_blank" rel="noopener">habren</a> 贡献</h3><p>越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 <strong>主题配置文件</strong> 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。</p>
<p>打赏功能配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: &#x2F;path&#x2F;to&#x2F;wechat-reward-image</span><br><span class="line">alipay: &#x2F;path&#x2F;to&#x2F;alipay-reward-image</span><br></pre></td></tr></table></figure>

<h4 id="修改字体旋转"><a href="#修改字体旋转" class="headerlink" title="修改字体旋转"></a><strong>修改字体旋转</strong></h4><p>修改<code>next/source/css/_common/components/post/post-reward.styl</code>，去掉<code>#</code>注释<code>wechat:hover</code>和<code>alipay:hover</code></p>
<h3 id="友情链接-由-iamwent-贡献"><a href="#友情链接-由-iamwent-贡献" class="headerlink" title="友情链接 由 iamwent 贡献"></a>友情链接 由 <a href="https://github.com/iissnan/hexo-theme-next/pull/250" target="_blank" rel="noopener">iamwent</a> 贡献</h3><p>编辑 <strong>主题配置文件</strong> 添加：</p>
<p>友情链接配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># title</span><br><span class="line">links_title: Links</span><br><span class="line">links:</span><br><span class="line">  MacTalk: http:&#x2F;&#x2F;macshuo.com&#x2F;</span><br><span class="line">  Title: http:&#x2F;&#x2F;example.com&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="腾讯公益404页面-由-xirong-贡献"><a href="#腾讯公益404页面-由-xirong-贡献" class="headerlink" title="腾讯公益404页面 由 xirong 贡献"></a>腾讯公益404页面 由 <a href="https://github.com/iissnan/hexo-theme-next/pull/126" target="_blank" rel="noopener">xirong</a> 贡献</h3><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果如下 <a href="http://www.ixirong.com/404.html" target="_blank" rel="noopener">http://www.ixirong.com/404.html</a></p>
<p>使用方法，新建 404.html 页面，放到主题的 <code>source</code> 目录下，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8;&quot;&#x2F;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;all&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,follow&quot;&#x2F;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;style&#x2F;404style.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;plain&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.qq.com&#x2F;404&#x2F;search_children.js&quot;</span><br><span class="line">          charset&#x3D;&quot;utf-8&quot; homePageUrl&#x3D;&quot;&#x2F;&quot;</span><br><span class="line">          homePageName&#x3D;&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;data.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;page.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 <code>© 2013 - 2015</code>。 编辑 <strong>主题配置文件</strong>，新增字段 <code>since</code>。</p>
<p>配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">since: 2013</span><br></pre></td></tr></table></figure>

<h3 id="订阅微信公众号-由-huiwang-贡献"><a href="#订阅微信公众号-由-huiwang-贡献" class="headerlink" title="订阅微信公众号 由 huiwang 贡献"></a>订阅微信公众号 由 <a href="https://github.com/iissnan/hexo-theme-next/pull/788" target="_blank" rel="noopener">huiwang</a> 贡献</h3><p><strong>注意：</strong> 此特性在版本 <strong>5.0.1</strong> 中引入，要使用此功能请确保所使用的 NexT 版本在此之后</p>
<p>在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。</p>
<p>在微信公众号平台下载您的二维码，并将它存放于博客<code>source/uploads/</code>目录下。</p>
<p>然后编辑 <strong>主题配置文件</strong>，如下：</p>
<p>配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Wechat Subscriber</span><br><span class="line">wechat_subscriber:</span><br><span class="line">  enabled: true</span><br><span class="line">  qcode: &#x2F;uploads&#x2F;wechat-qcode.jpg</span><br><span class="line">  description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！</span><br></pre></td></tr></table></figure>

<h3 id="设置「动画效果」"><a href="#设置「动画效果」" class="headerlink" title="设置「动画效果」"></a>设置「动画效果」</h3><p>NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 <code>false</code> 来关闭动画。</p>
<p>编辑 <strong>主题配置文件</strong>， 搜索 <code>use_motion</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code> 即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use_motion: true  # 开启动画效果</span><br><span class="line">use_motion: false # 关闭动画效果</span><br></pre></td></tr></table></figure>

<h3 id="设置「背景动画」"><a href="#设置「背景动画」" class="headerlink" title="设置「背景动画」"></a>设置「背景动画」</h3><p>NexT 自带两种背景动画效果</p>
<p>编辑 <strong>主题配置文件</strong>， 搜索 <code>canvas_nest</code> 或 <code>three_waves</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code> 即可：</p>
<p><strong>注意：</strong> <code>three_waves</code> 在版本 <strong>5.1.1</strong> 中引入。只能同时开启一种背景动画效果。</p>
<p><code>canvas_nest</code> 配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># canvas_nest</span><br><span class="line">canvas_nest: true &#x2F;&#x2F;开启动画</span><br><span class="line">canvas_nest: false &#x2F;&#x2F;关闭动画</span><br></pre></td></tr></table></figure>

<p><code>three_waves</code> 配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># three_waves</span><br><span class="line">three_waves: true &#x2F;&#x2F;开启动画</span><br><span class="line">three_waves: false &#x2F;&#x2F;关闭动画</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo - 博客</category>
      </categories>
      <tags>
        <tag>Hexo - 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Java——leetcode18. 四数之和</title>
    <url>/2020/04/23/Java%E2%80%94%E2%80%94leetcode18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p>
<p>注意：</p>
<p>答案中不可以包含重复的四元组。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1, 0, -1, 0, -2, 2]，和 target &#x3D; 0。</span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>思路，两层循环选出两个数字，对剩下的数字跑双指针。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums,int target) &#123;</span><br><span class="line">    	List&lt;List&lt;Integer&gt;&gt; listArr&#x3D;new ArrayList&lt;&gt;();</span><br><span class="line">        int len&#x3D;nums.length;</span><br><span class="line">        int left,right;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"> </span><br><span class="line">        for(int i&#x3D;0;i&lt;len;++i)&#123;</span><br><span class="line">        	if(i&gt;0 &amp;&amp; nums[i] &#x3D;&#x3D; nums[i-1]) continue;</span><br><span class="line">            for(int j&#x3D;i+1;j&lt;len;++j)&#123;</span><br><span class="line">                if(j&gt;i+1 &amp;&amp; nums[j] &#x3D;&#x3D; nums[j-1]) continue;</span><br><span class="line">                left&#x3D;j+1;</span><br><span class="line">                right&#x3D;len-1;</span><br><span class="line">                while(left&lt;right) &#123;</span><br><span class="line">                    int four&#x3D;nums[left]+nums[right]+nums[i]+nums[j];</span><br><span class="line">                    if(four&gt;target)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;else if(four&lt;target)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                	    listArr.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));</span><br><span class="line">                	    while(left&lt;right &amp;&amp; nums[left]&#x3D;&#x3D;nums[left+1])left++;</span><br><span class="line">                	    while(left&lt;right &amp;&amp; nums[right]&#x3D;&#x3D;nums[right-1])right--;</span><br><span class="line">                	    left++;</span><br><span class="line">                	    right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        return listArr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中i++与++i的区别，如何分清i++与++i</title>
    <url>/2020/04/22/Java%E4%B8%ADi-%E4%B8%8E-i%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%A6%82%E4%BD%95%E5%88%86%E6%B8%85i-%E4%B8%8E-i/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="书上对-i-和-i-的解释如下："><a href="#书上对-i-和-i-的解释如下：" class="headerlink" title="书上对 i ++ 和 ++ i 的解释如下："></a>书上对 i ++ 和 ++ i 的解释如下：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i &#x3D; 3，a &#x3D; 0 ；</span><br><span class="line"> i ++ : 先赋值再运算；例如：a &#x3D; i ++; 先赋值 a &#x3D; i ，再运算 i &#x3D; i + 1 ；所以输出结果为 a &#x3D;&#x3D;3;</span><br><span class="line"> ++ i : 先运算再赋值；例如：a &#x3D; i ++; 先运算 i &#x3D; i + 1 ，再 赋值 a &#x3D; i ；所以输出结果为 a &#x3D;&#x3D;4;</span><br></pre></td></tr></table></figure>

<p>懂了吗？我想大部分人会跟我一样 一脸懵逼，明明都 + 1 了，咋上面输出结果是 3 下面就是 4 呢？哈哈~不要着急，接下来我将分享一下我对它们的理解，希望对你们有帮助。</p>
<h2 id="认识“-”与“–”"><a href="#认识“-”与“–”" class="headerlink" title="认识“++”与“–”"></a>认识“++”与“–”</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“++”与“--”分别称作自增操作符和自减操作符，是对变量进行加 1 和减 1 的操作符。</span><br></pre></td></tr></table></figure>

<h2 id="认识-i-与-i"><a href="#认识-i-与-i" class="headerlink" title="认识 i + + 与 i - -"></a>认识 i + + 与 i - -</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i++读为 i 加 加，i--读为 i 减减，这些操作符分别称为后置自增操作符和后置自减操作符。</span><br></pre></td></tr></table></figure>

<h2 id="以-i-为例，先来介绍一下i-，-i-的计算方法分为以下5个步骤"><a href="#以-i-为例，先来介绍一下i-，-i-的计算方法分为以下5个步骤" class="headerlink" title="以 i++为例，先来介绍一下i++， i++ 的计算方法分为以下5个步骤"></a>以 i++为例，先来介绍一下i++， i++ 的计算方法分为以下5个步骤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先开批一个临时存储区</span><br><span class="line">将 i 的值复制到存储区</span><br><span class="line">i 自身+1</span><br><span class="line">临时存储区的值等待被调用（参与运算、输出、赋值）</span><br><span class="line">若 i 被调用则输出值为 i ，否则输出 i++</span><br></pre></td></tr></table></figure>

<h2 id="图解如下："><a href="#图解如下：" class="headerlink" title="图解如下："></a>图解如下：</h2><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235459.png" alt></p>
<p>接下来我会举例说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test&#123;</span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">         int i &#x3D; 3;</span><br><span class="line">         &#x2F;*</span><br><span class="line">         创建一个变量i，里面放i的初始值3，先开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为3&#x2F;</span><br><span class="line">i ++;&#x2F;&#x2F;i自身加1，此时i的值为4         </span><br><span class="line">System.out.print(i);&#x2F;&#x2F;打印输出i，因为i没有被调用，故输出i自身的值4         System.out.print(i++);         </span><br><span class="line">         &#x2F;上一行代码中i的值已经变成了4，再开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为4，i自身的值+1变为5；</span><br><span class="line">         i++被输出调用，故输出存储区的值4&#x2F;         </span><br><span class="line">int j &#x3D; i++;         </span><br><span class="line">System.out.print(j);         </span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">         &#x2F;上一行代码中i的值已经变成了5，再开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为5，i自身的值+1变为6；</span><br><span class="line">         i++被赋值调用，故输出存储区的值5&#x2F;</span><br><span class="line">System.out.print(i);&#x2F;&#x2F;没被调用，故打印值为i自身的值6         </span><br><span class="line">i &#x3D; i++;         </span><br><span class="line">System.out.print(i);         &#x2F;</span><br><span class="line">         上一行代码中i的值已经变成了6，再开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为6，i自身的值+1变为7；</span><br><span class="line">         i++被赋值调用，故输出存储区的值6&#x2F;         </span><br><span class="line">i &#x3D; i++;         </span><br><span class="line">System.out.print(i);         &#x2F;</span><br><span class="line">         上一行代码中i的值为6，再开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为6，i自身的值+1变为7；</span><br><span class="line">         i++被赋值调用，故输出存储区的值6</span><br><span class="line">          *&#x2F;</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>同理可得 i - - 的计算方法如下，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先开批一个临时存储区</span><br><span class="line">将 i 的值复制到存储区</span><br><span class="line">i 自身 -1</span><br><span class="line">临时存储区的值等待被调用（参与运算、输出、赋值）</span><br><span class="line">若 i 被调用则输出值为 i ，否则输出 i - -</span><br></pre></td></tr></table></figure>

<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test01&#123;</span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">         int i &#x3D; 5;</span><br><span class="line">         &#x2F;*</span><br><span class="line">         创建一个变量i，里面放i的初始值5，先开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为5 &#x2F;         </span><br><span class="line">i--;&#x2F;&#x2F;i自身减1，此时i的值为4         </span><br><span class="line">System.out.println(i);&#x2F;&#x2F;打印输出i，因为i没有被调用，故输出i自身的值4         System.out.print(i--);</span><br><span class="line">         &#x2F;上一行代码中i的值已经变成了4，再开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为4，i自身的值-1变为3；</span><br><span class="line">         i--被输出调用，故输出存储区的值4&#x2F;</span><br><span class="line">int j &#x3D; i--;</span><br><span class="line">System.out.print(j);&#x2F;&#x2F;3</span><br><span class="line">        &#x2F;上一行代码中i的值已经变成了4，再开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为4，i自身的值-1变为3；</span><br><span class="line">         i--被赋值调用，故输出存储区的值3&#x2F;</span><br><span class="line">System.out.print(i);&#x2F;&#x2F;没被调用，故打印值为i自身的值3         </span><br><span class="line">i &#x3D; i--;</span><br><span class="line">System.out.print(i);&#x2F;&#x2F;2         &#x2F;</span><br><span class="line">         上一行代码中i的值已经变成了3，再开辟一个临时存储区，</span><br><span class="line">         将i的值复制到存储区，此时存储区里面i的值为3，i自身的值-1变为2；</span><br><span class="line">         i--被赋值调用，故输出存储区的值2</span><br><span class="line">          *&#x2F;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="认识-i-与-i-1"><a href="#认识-i-与-i-1" class="headerlink" title="认识+ + i 与 - - i"></a>认识+ + i 与 - - i</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">++i 读作加加i，--i读作减减i，分别称作前置自增操作符和前置自减操作符。</span><br></pre></td></tr></table></figure>

<p>相对于i++来说，++i 的运算思路比较简单，只进行简单的+1操作即可。</p>
<h2 id="举例说明："><a href="#举例说明：" class="headerlink" title="举例说明："></a>举例说明：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test&#123;</span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">         i &#x3D; 1;</span><br><span class="line">         j &#x3D; i++ + ++i + ++i + i++;</span><br><span class="line">         &#x2F;&#x2F;  1      3     4      4</span><br><span class="line">         &#x2F;*</span><br><span class="line">         i++: 赋值调用，故打印值为1，临时存储区放的值为2</span><br><span class="line">         ++i：i的值+1，故值为3</span><br><span class="line">         ++i：i的值+1，故值为4</span><br><span class="line">         i++：赋值调用，故输出临时存储区的值4，i自身值+1为5</span><br><span class="line">          *&#x2F;</span><br><span class="line">         System.out.print(j);&#x2F;&#x2F;故输出结果为12</span><br><span class="line">         System.out.print(i);&#x2F;&#x2F;没有参与调用，故输出i自身的值5</span><br><span class="line">         System.out.print(++i);&#x2F;&#x2F;输出值为6。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同理，--i ，也只是在自身基础上- 1即可。</span><br></pre></td></tr></table></figure>

<h2 id="举例说明：-1"><a href="#举例说明：-1" class="headerlink" title="举例说明："></a>举例说明：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test01&#123;</span><br><span class="line">     public static void main(String[] args)&#123;</span><br><span class="line">         int i &#x3D; 5;</span><br><span class="line">         --i;</span><br><span class="line">         System.out.println(i);&#x2F;&#x2F;i自身减1，值为4</span><br><span class="line">         System.out.print(--i);&#x2F;&#x2F;i自身减1，值为3</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用自增操作符和自减操作符可以使表达式更加简短，但也会使它们比较复杂且难以读懂。比如上述代码中出现的 j = i++ + ++i + ++i + i++; 只是为了测试大家是否更好的掌握了i ++与 ++ i，但在实际编程过程中应该避免。</p>
<h1 id="我的总结如下："><a href="#我的总结如下：" class="headerlink" title="我的总结如下："></a>我的总结如下：</h1><p>i++、i– ：若参与调用，输出值不 +1，否则 +1<br>++i、–i ：无论是否参与调用，输出值均 +1<br>希望大家在读懂我上述描述的基础上，再合理运用这两句话 ~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">附：文章开头那道题，现在用我的方法来做，是不是易如反掌啦~</span><br><span class="line">  </span><br><span class="line"> int i &#x3D; 3，a &#x3D; 0 ；</span><br><span class="line"> i ++ : 例如：a &#x3D; i ++;因为赋值调用了，所以输出值为临时存储区先复制的i的值，即 a &#x3D;&#x3D;3;</span><br><span class="line"> ++ i : 例如：a &#x3D; i ++; 输出结果直接 +1 即结果为 a &#x3D;&#x3D;4;</span><br></pre></td></tr></table></figure>

<p>参考文章：</p>
<p>原文链接：<a href="https://blog.csdn.net/MillionSong/article/details/104204481" target="_blank" rel="noopener">https://blog.csdn.net/MillionSong/article/details/104204481</a></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
        <tag>编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title> Java基础知识点梳理</title>
    <url>/2020/04/23/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="Java基础知识点梳理"><a href="#Java基础知识点梳理" class="headerlink" title="Java基础知识点梳理"></a>Java基础知识点梳理</h1><h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>在经过这段时间对java的学习，但是一直没系统地对java这门语言进行梳理和总结，掌握的知识也比较零散。恰好利用这段时间重新认识下java，并对一些常见的语法和知识点做个总结与回顾，一方面为了加深印象，方便后面查阅，一方面为了学好java打下基础。</p>
<h2 id="1-Java简介"><a href="#1-Java简介" class="headerlink" title="1.Java简介"></a>1.Java简介</h2><p>java语言于1995年正式推出，最开始被命名为Oak语言，由James Gosling（詹姆斯·高斯林）在Sun Microsystems公司和同事共同研发，Microsystems如今已经被oracle收购。java语言具有以下特点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单性</span><br><span class="line">面向对象</span><br><span class="line">可移植性</span><br><span class="line">安全性</span><br><span class="line">健壮性</span><br><span class="line">多线程</span><br></pre></td></tr></table></figure>

<h2 id="2-Java文件运行过程如下："><a href="#2-Java文件运行过程如下：" class="headerlink" title="2.Java文件运行过程如下："></a>2.Java文件运行过程如下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.编写源代码，文件格式： .java</span><br><span class="line">2.编译 .java文件 生成.class文件（二进制字节码文件）</span><br><span class="line">3.运行 .class文件在JVM上(java虚拟机，支持多平台)</span><br></pre></td></tr></table></figure>

<h2 id="3-Java语言基础语法"><a href="#3-Java语言基础语法" class="headerlink" title="3.Java语言基础语法"></a>3.Java语言基础语法</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><p>注释用于解释程序，增强可读性，java中注释有以下几种:</p>
<h4 id="1-单行注释，语法如下："><a href="#1-单行注释，语法如下：" class="headerlink" title="1.单行注释，语法如下："></a>1.单行注释，语法如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 单行注释</span><br></pre></td></tr></table></figure>

<h4 id="2-多行注释，语法如下："><a href="#2-多行注释，语法如下：" class="headerlink" title="2.多行注释，语法如下："></a>2.多行注释，语法如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">多行注释</span><br><span class="line">多行注释</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="3-javadoc注释，是一种专业注释，可以被javadoc-exe工具解析提取生成帮助文档"><a href="#3-javadoc注释，是一种专业注释，可以被javadoc-exe工具解析提取生成帮助文档" class="headerlink" title="3.javadoc注释，是一种专业注释，可以被javadoc.exe工具解析提取生成帮助文档"></a>3.javadoc注释，是一种专业注释，可以被javadoc.exe工具解析提取生成帮助文档</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">javadoc注释</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h3><p>标识符用于标识类名，方法名，变量名，接口名等，命名需要满足以下规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只能由&quot;数字，字母（A-Z 或者 a-z）,美元符（$）、或者下划线（）&quot;组成 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（）开始</span><br><span class="line">严格区分大小写，不能用关键字做标识符</span><br></pre></td></tr></table></figure>

<p>java编程规范建议遵守驼峰命名法，类名和接口名首字母大写，变量和方法名首字母小写。Java采用unicode的编码方式，所以标识符也支持中文。</p>
<h3 id="3-类的定义"><a href="#3-类的定义" class="headerlink" title="3.类的定义"></a>3.类的定义</h3><p>java定义一个类用class关键字，有以下几点需要注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个java源文件定义公开的类只能有一个，类名称必须和java源文件名称一致</span><br><span class="line">一个java源文件可以编写多个class</span><br><span class="line">每一个class都可以编写main方法</span><br></pre></td></tr></table></figure>

<h2 id="4-Java数据类型"><a href="#4-Java数据类型" class="headerlink" title="4.Java数据类型"></a>4.Java数据类型</h2><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h4><p>数据类型的作用是指导JVM在运行程序的时候给该数据分配多大的内存空间，Java提供了以下八种基础数据类型：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000337.png" alt></p>
<h4 id="2-整型表示方式"><a href="#2-整型表示方式" class="headerlink" title="2.整型表示方式"></a>2.整型表示方式</h4><p>整型有三种表示方式，默认是十进制：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000423.png" alt></p>
<h4 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3.类型转换"></a>3.类型转换</h4><p>类型转换有如下规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.八种基本数据类型除了布尔类型之外，剩下的7种类型都可以互相转换</span><br><span class="line">2.小容量向大容量转换，可以自动进行，容量从小到大排序为：</span><br><span class="line">byte &lt; short &lt; int &lt; long &lt; float &lt; double</span><br><span class="line">3.大容量数据转换成小容量，需要进行强制类型转换，强转会损失精度</span><br><span class="line">4.byte, short ,char 混合运算，各自转换成int；多种数据类型混合运算，转换成容量最大的类型再运算。</span><br></pre></td></tr></table></figure>

<p>对于强制类型转换，将long强转成int的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long k &#x3D; 6475201314L;</span><br><span class="line">int num &#x3D; (int) k;</span><br></pre></td></tr></table></figure>

<p>注意：大容量转换成小容量编译无法通过，比如下面代码无法编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte b &#x3D; 19;</span><br><span class="line">b &#x3D; b + 13; &#x2F;&#x2F; 相当于直接把整型赋值给byte型，报错</span><br><span class="line">b +&#x3D; 13; &#x2F;&#x2F; 可以编译，等同于 b &#x3D; (byte)(b + 13)</span><br></pre></td></tr></table></figure>

<h4 id="4-复合数据类型"><a href="#4-复合数据类型" class="headerlink" title="4.复合数据类型"></a>4.复合数据类型</h4><h5 id="1-字符串-String"><a href="#1-字符串-String" class="headerlink" title="1.字符串(String)"></a>1.字符串(String)</h5><p>在Java中使用String 类来创建和操作字符串，初始化一个String的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 常用，用双引号直接创建</span><br><span class="line">String testStr &#x3D; &quot;Wasting time is robbing oneself&quot;;</span><br><span class="line">&#x2F;&#x2F; 不常用，使用char数组创建</span><br><span class="line">char[] helloArray &#x3D; &#123;&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;&#125;;</span><br><span class="line">String helloString &#x3D; new String(helloArray);</span><br></pre></td></tr></table></figure>

<p>由于字符串使用非常频繁，String类也提供了很多方法，下面介绍一些用的比较多的。</p>
<h6 id="1-对字符串进行修改的常用方法有-包括格式化，大小写转换-："><a href="#1-对字符串进行修改的常用方法有-包括格式化，大小写转换-：" class="headerlink" title="1.对字符串进行修改的常用方法有(包括格式化，大小写转换)："></a>1.对字符串进行修改的常用方法有(包括格式化，大小写转换)：</h6><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000430.png" alt></p>
<h6 id="2-对字符串进行查找和替换的方法有："><a href="#2-对字符串进行查找和替换的方法有：" class="headerlink" title="2.对字符串进行查找和替换的方法有："></a>2.对字符串进行查找和替换的方法有：</h6><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000437.png" alt></p>
<p>获取子字符串的常用方法有：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000446.png" alt></p>
<h6 id="3-对字符串进行比较的方法有："><a href="#3-对字符串进行比较的方法有：" class="headerlink" title="3.对字符串进行比较的方法有："></a>3.对字符串进行比较的方法有：</h6><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000454.png" alt></p>
<h6 id="4-其他常见的方法比如统计长度，拼接，转换等："><a href="#4-其他常见的方法比如统计长度，拼接，转换等：" class="headerlink" title="4.其他常见的方法比如统计长度，拼接，转换等："></a>4.其他常见的方法比如统计长度，拼接，转换等：</h6><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000503.png" alt></p>
<h5 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h5><h6 id="1-数组可以用于存放固定大小的同类型元素，声明一个数组的语法如下："><a href="#1-数组可以用于存放固定大小的同类型元素，声明一个数组的语法如下：" class="headerlink" title="1.数组可以用于存放固定大小的同类型元素，声明一个数组的语法如下："></a>1.数组可以用于存放固定大小的同类型元素，声明一个数组的语法如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量类型[] 数组名;</span><br></pre></td></tr></table></figure>

<h6 id="2-创建数组的语法："><a href="#2-创建数组的语法：" class="headerlink" title="2.创建数组的语法："></a>2.创建数组的语法：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组名 &#x3D; new 变量类型[数组大小];</span><br><span class="line">变量类型[] 数组名 &#x3D; &#123;value0, value1, …, valuek&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="3-数组的变量类型可以是前面介绍八种基本数据类型以及复合数据类型，“数组名-索引-”-可以访问数组元素，下面是一个操作一维数组例子："><a href="#3-数组的变量类型可以是前面介绍八种基本数据类型以及复合数据类型，“数组名-索引-”-可以访问数组元素，下面是一个操作一维数组例子：" class="headerlink" title="3.数组的变量类型可以是前面介绍八种基本数据类型以及复合数据类型，“数组名[索引]” 可以访问数组元素，下面是一个操作一维数组例子："></a>3.数组的变量类型可以是前面介绍八种基本数据类型以及复合数据类型，“数组名[索引]” 可以访问数组元素，下面是一个操作一维数组例子：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] primeNumbers &#x3D; &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29&#125;;</span><br><span class="line"> for (int num : primeNumbers) &#123;</span><br><span class="line">     System.out.println(&quot;num: &quot; + num);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-操作二维数组的例子如下："><a href="#4-操作二维数组的例子如下：" class="headerlink" title="4.操作二维数组的例子如下："></a>4.操作二维数组的例子如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[][] a &#x3D; new int[2][3];</span><br><span class="line">a[0][0] &#x3D; 19;</span><br><span class="line">String[][] s &#x3D; new String[2][];</span><br><span class="line">s[0] &#x3D; new String[2]; &#x2F;&#x2F; 第一个数组长度为2</span><br><span class="line">s[1] &#x3D; new String[3]; &#x2F;&#x2F; 第二个数组长度为3</span><br><span class="line">s[0][0] &#x3D; &quot;Hello&quot;;</span><br><span class="line">s[0][1] &#x3D; &quot;World&quot;;</span><br></pre></td></tr></table></figure>

<h6 id="5-java-util-Arrays类能方便地操作数组，它提供的所有方法都是静态的，比较常见的方法有："><a href="#5-java-util-Arrays类能方便地操作数组，它提供的所有方法都是静态的，比较常见的方法有：" class="headerlink" title="5.java.util.Arrays类能方便地操作数组，它提供的所有方法都是静态的，比较常见的方法有："></a>5.java.util.Arrays类能方便地操作数组，它提供的所有方法都是静态的，比较常见的方法有：</h6><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000509.png" alt></p>
<h6 id="6-使用Arrays的sort方法进行排序的例子如下："><a href="#6-使用Arrays的sort方法进行排序的例子如下：" class="headerlink" title="6.使用Arrays的sort方法进行排序的例子如下："></a>6.使用Arrays的sort方法进行排序的例子如下：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] primeNumbers &#x3D; &#123;7, 11, 5, 2, 3&#125;;</span><br><span class="line"> Arrays.sort(primeNumbers);</span><br><span class="line"> for (int num : primeNumbers) &#123;</span><br><span class="line">     System.out.println(&quot;num: &quot; + num);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-集合"><a href="#3-集合" class="headerlink" title="3.集合"></a>3.集合</h5><p>Java语言提供了一个完善的集合框架，主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射<br>经常用到的集合有：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000553.png" alt></p>
<p>ArrayList提供的常用方法有：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000606.png" alt></p>
<p>下面是操作一个java.util.ArrayList的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArrayList list &#x3D; new ArrayList();</span><br><span class="line">list.add(2);</span><br><span class="line">list.add(3);</span><br><span class="line">list.add(5);</span><br><span class="line">for (int i &#x3D; 0; i&lt;list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br><span class="line">list.remove(1);</span><br><span class="line">list.set(1, 19);</span><br></pre></td></tr></table></figure>

<h5 id="4-类型转换方法"><a href="#4-类型转换方法" class="headerlink" title="4.类型转换方法"></a>4.类型转换方法</h5><p>关于数据类型，最后再介绍下Java中常见的类型转换方法：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000626.png" alt></p>
<h4 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h4><p>Java的运算符种类比较多，本文介绍几种常见的运算符：</p>
<h5 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h5><p>java的算术运算符如下表(int a = 10; int b= 9;):</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000639.png" alt></p>
<p>基本的赋值运算符”=” 可以与前5种算术运算符组合成 +=,-=,*=,/=,%=等扩展的赋值运算符<br>int a = 10; a += 5； 等价于 a = (int)(a + 5)；<br>其他的运算符类似，扩展运算符默认有类型转换，但是不改变运算结果类型</p>
<p>对于”+”运算符，只要两边的操作数有一个是字符串就会进行字符串连接运算生成一个新的字符串。</p>
<h5 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h5><p>java中主要有以下六种关系运算符：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000647.png" alt></p>
<p>关系运算符返回的结果是布尔型</p>
<h5 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h5><p>主要有以下三种逻辑运算符（boolean a = true; boolean b = false）：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000655.png" alt></p>
<h5 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4.位运算符"></a>4.位运算符</h5><p>位运算符对两个操作数的每一位进行运算，有以下几种常见的类型：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000703.png" alt></p>
<h5 id="5-三目运算符"><a href="#5-三目运算符" class="headerlink" title="5.三目运算符"></a>5.三目运算符</h5><p>三目元素符的语法规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">布尔表达式 ? 表达式1 : 表达式2;</span><br></pre></td></tr></table></figure>

<p>布尔表达式为真执行表达式1，为假执行表达式2，利用三目运算符求最大值的一个例子如下：</p>
<h4 id="6-控制语句"><a href="#6-控制语句" class="headerlink" title="6.控制语句"></a>6.控制语句</h4><p>每种编程语言都少不了控制语句来控制代码流程，java语言也提供了丰富的控制语句。</p>
<h5 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1.选择结构"></a>1.选择结构</h5><h6 id="1-if语句"><a href="#1-if语句" class="headerlink" title="1.if语句"></a>1.if语句</h6><p>if语句常见的语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一种写法，else分支可以省略</span><br><span class="line"> if (布尔表达式) &#123;</span><br><span class="line">     表达式为真要执行的语句;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">     其他条件要执行的语句</span><br><span class="line"> &#125;</span><br><span class="line"> &#x2F;&#x2F; 第二种写法，最后的else分支可以省略</span><br><span class="line"> if (布尔表达式) &#123;</span><br><span class="line">     表达式为真要执行的语句;</span><br><span class="line"> &#125; else if (布尔表达式1) &#123;</span><br><span class="line">     表达式1为真要执行的语句</span><br><span class="line"> &#125; else if (布尔表达式2) &#123;</span><br><span class="line">     表达式2为真要执行的语句</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">     除上述条件之外要执行的语句</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-switch语句"><a href="#2-switch语句" class="headerlink" title="2.switch语句"></a>2.switch语句</h6><p>switch语句的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch (expression) &#123;</span><br><span class="line">     case value1 :</span><br><span class="line">        &#x2F;&#x2F; 匹配value1成功之后执行的语句</span><br><span class="line">        break; &#x2F;&#x2F; 可选</span><br><span class="line">     case value2 :</span><br><span class="line">        &#x2F;&#x2F; 匹配value2成功之后执行的语句</span><br><span class="line">        break; &#x2F;&#x2F;可选</span><br><span class="line">     …</span><br><span class="line">     default : &#x2F;&#x2F; 可选</span><br><span class="line">        &#x2F;&#x2F; 前面case分支都没匹配时执行的语句</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>其中expression支持byte、short、int、char以及字符串(String)，byte、short、char会转换为int类型。程序只有遇到break语句才会跳出switch语句，缺少break的分支会继续往下面分支执行。</p>
<h5 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2.循环结构"></a>2.循环结构</h5><p>程序当中总会有些需要重复执行的代码片段，因此各个编程语言都支持循环语法。</p>
<h6 id="1-for语句"><a href="#1-for语句" class="headerlink" title="1.for语句"></a>1.for语句</h6><p>for语句的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (初始化表达式; 布尔表达式; 更新表达式) &#123;    </span><br><span class="line">      &#x2F;&#x2F; 要重复执行的代码片段 &#125;</span><br></pre></td></tr></table></figure>

<p>执行过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 初始化表达式最先执行而且只执行一次；</span><br><span class="line">2.判断布尔表达式，如果是真执行循环体，如果是假则退出循环</span><br><span class="line">3.循环体执行之后更新表达式，再执行步骤2，反复循环直到退出循环</span><br><span class="line">利用for循环计算数字1到10的和的代码如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line"> for (int i &#x3D; 0; i &lt;&#x3D; 10; i++) &#123;</span><br><span class="line">     sum +&#x3D; i;</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(&quot;the sum is: &quot; + sum);</span><br></pre></td></tr></table></figure>

<h6 id="2-while语句"><a href="#2-while语句" class="headerlink" title="2.while语句"></a>2.while语句</h6><p>while语句的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (布尔表达式) &#123;</span><br><span class="line">   &#x2F;&#x2F; 循环内容</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>执行过程:<br>先判断布尔表达式的值，为真就执行循环体，为假则循环结束，循环体可能一次也不执行。<br>使用while循环计算数字1到10的和是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line"> int i &#x3D; 0;</span><br><span class="line"> while (i &lt;&#x3D;10) &#123;</span><br><span class="line">     sum +&#x3D; i;</span><br><span class="line">     i++;</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(&quot;The sum is: &quot; + sum);</span><br></pre></td></tr></table></figure>

<h6 id="3-do…while-循环"><a href="#3-do…while-循环" class="headerlink" title="3.do…while 循环"></a>3.do…while 循环</h6><p>do…while循环的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">     &#x2F;&#x2F; 循环内容</span><br><span class="line"> &#125; while (布尔表达式);</span><br></pre></td></tr></table></figure>

<p>do…while循环先执行循环内容再判断表达式，循环体至少会执行一次。</p>
<h4 id="7-控制循环语句"><a href="#7-控制循环语句" class="headerlink" title="7.控制循环语句"></a>7.控制循环语句</h4><h5 id="1-break语句"><a href="#1-break语句" class="headerlink" title="1.break语句"></a>1.break语句</h5><p>break使用在switch语句中终止switch执行，使用在循环语句中终止循环，跳出当前循环体。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">break;</span><br></pre></td></tr></table></figure>

<h5 id="2-continue语句"><a href="#2-continue语句" class="headerlink" title="2.continue语句"></a>2.continue语句</h5><p>continue表示直接进入下一次循环继续执行，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">continue;</span><br></pre></td></tr></table></figure>

<h2 id="5-Java变量类型"><a href="#5-Java变量类型" class="headerlink" title="5.Java变量类型"></a>5.Java变量类型</h2><p>在Java中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type identifier &#x3D; value;</span><br><span class="line"> 1</span><br><span class="line">value的数据类型必须和声明的变量类型一致，变量的值可变化，必须先声明再赋值才能访问。</span><br></pre></td></tr></table></figure>

<h4 id="1-局部变量："><a href="#1-局部变量：" class="headerlink" title="1.局部变量："></a>1.局部变量：</h4><p>java中的局部变量声明在方法内部，有以下特点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量只在作用域内有效，超出作用域变量将会被销毁；</span><br><span class="line">变量是在栈上分配，没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</span><br><span class="line">局部变量存储在栈内存中。</span><br></pre></td></tr></table></figure>

<h4 id="2-实例变量-成员变量-："><a href="#2-实例变量-成员变量-：" class="headerlink" title="2.实例变量(成员变量)："></a>2.实例变量(成员变量)：</h4><p>成员变量在方法体之外声明，有以下特点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当一个对象被实例化之后，每个实例变量的值就跟着确定</span><br><span class="line">实例变量在对象创建的时候创建，在对象被销毁的时候销毁</span><br><span class="line">实例变量具有默认值，数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变 量的默认值是null。</span><br><span class="line">成员变量在JVM的堆内存中存储，垃圾回收器主要针对堆内存处理。</span><br></pre></td></tr></table></figure>

<h4 id="3-静态变量："><a href="#3-静态变量：" class="headerlink" title="3.静态变量："></a>3.静态变量：</h4><p>静态变量用static关键字声明，需要记住以下特点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">无论一个类创建了多少个对象，类只拥有静态变量的一份拷贝</span><br><span class="line">静态变量在第一次被访问时创建，在程序结束时销毁。</span><br><span class="line">静态变量具有默认值，取值和实例变量类似</span><br></pre></td></tr></table></figure>

<h4 id="4-不同类型变量在JVM中的存储情况如下表："><a href="#4-不同类型变量在JVM中的存储情况如下表：" class="headerlink" title="4.不同类型变量在JVM中的存储情况如下表："></a>4.不同类型变量在JVM中的存储情况如下表：</h4><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000715.png" alt></p>
<h5 id="1-方法-函数"><a href="#1-方法-函数" class="headerlink" title="1.方法/函数"></a>1.方法/函数</h5><h6 id="1-方法语法"><a href="#1-方法语法" class="headerlink" title="1.方法语法"></a>1.方法语法</h6><p>方法实质就是一段可以重复使用，完成某项特定功能的片段，和C语言中的函数类似。方法的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[修饰符] 返回值类型 方法名(参数类型 参数名1, 参数类型 参数名2 …) &#123;</span><br><span class="line">     …</span><br><span class="line">     方法体;</span><br><span class="line">     …</span><br><span class="line">     return 返回值; &#x2F;&#x2F; 可选，与返回值类型一致</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>比如常见的main方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String []args) &#123;</span><br><span class="line">     System.out.println(&quot;Hello World!&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>方法有如下几个部分组成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.修饰符：修饰符，这是可选的，定义了该方法的访问类型。比如public, static, private, protected等</span><br><span class="line">2.返回值类型 ：方法可能会返回值，支持前面介绍的八种基本数据类型以及String，如果不需要返回值，返回值类型就写成void。</span><br><span class="line">3.方法名：是方法的实际名称，建议首字母小写。方法名和参数表共同构成方法签名。</span><br><span class="line">4.参数类型：即形参列表，形参的个数可以是：0~N个。当方法被调用时，传递值给对应参数，这个值被称为实参。</span><br><span class="line">5.方法体：方法体包含具体的语句，定义该方法的功能。</span><br><span class="line"> 下面是实现判断一个正整数是否是质数的函数的例子(假设num大于2)：</span><br><span class="line"> private static boolean isPrimeNumber(int num) &#123;</span><br><span class="line">     boolean isPrime &#x3D; true;</span><br><span class="line">     for (int i &#x3D; 2; i &lt; num; i++) &#123;</span><br><span class="line">         if (num % i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">             isPrime &#x3D; false;</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     return isPrime;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-方法内存"><a href="#2-方法内存" class="headerlink" title="2.方法内存"></a>2.方法内存</h5><p>方法代码片段属于.class字节码文件的一部分，在调用方法的时候才会在栈中分配内存，称为压栈；方法执行结束释放方法的内存空间称为弹栈。方法执行完之后，方法内局部变量的空间也释放，因此局部变量只在方法内有效。JVM的栈中主要存储的是局部变量。</p>
<h5 id="3-方法重载"><a href="#3-方法重载" class="headerlink" title="3.方法重载"></a>3.方法重载</h5><p>方法重载(overload)主要是是指方法名相同，参数列表不同，和返回值类型无关，和修饰符无关。要构成方法重载需要满足以下条件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法是在同一个类当中</span><br><span class="line">这些方法的方法名相同</span><br><span class="line">参数列表不同，可以是数量不同，顺序不同，类型不同</span><br></pre></td></tr></table></figure>

<h2 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6.面向对象"></a>6.面向对象</h2><p>面向对象是Java核心的特点，主要有以下特性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">封装：封装就是隐藏实现细节，仅对外提供访问接口。优点是使代码模块化，具有安全性。</span><br><span class="line">继承：继承就是将已存在的类(父类)的定义作为基础建立新类，新类(子类)的定义可以增加新的数据或新的功能，也可以用父类的功能</span><br><span class="line">多态：多态就是引用变量指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定。使得程序灵活地运行在多个状态。</span><br><span class="line">对象和类的定义：</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象(object)：对象是类的一个实例，是实际存在的个体，有状态和行为。</span><br><span class="line">类(class)：类是一个模板，它描述一类对象的行为和状态，是抽象思考的结果。</span><br><span class="line">对象和类的关系：</span><br><span class="line">一个类进行实例化就形成了对象，对象抽象形成类。</span><br></pre></td></tr></table></figure>

<p>类的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[修饰符列表] class 类名 &#123;</span><br><span class="line">     属性; &#x2F;&#x2F; 对象的状态信息，通常采用变量方式定义，称为成员变量</span><br><span class="line">     方法; &#x2F;&#x2F; 对象的动作信息</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>类实例化需要用<strong>new</strong>运算符，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new 类名();</span><br></pre></td></tr></table></figure>

<p>java中的类属于引用数据类型，new新建的java对象存储在JVM的堆内存中，new等号左侧类的变量名存储的是指向堆内存的地址。每个new出来的类的内存互相独立。<br>Java面向对象中相关的重要知识点有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造方法：构造方法名称与类名相同，无返回参数。构造方法在类初始化的时候调用，支持重载。类存在默认的无参构造方法。</span><br><span class="line">this关键字：this指向当前对象的引用，&quot;this.属性名称&quot;或者&quot;this.方法名称&quot;用于访问本类的变量或者方法，在构造方法中使用&quot;this();&quot;语句访问本类的构造方法。</span><br><span class="line">static关键字：static修饰属性表示静态变量，修饰类的方法表明无需类的对象就可以调用此方法。</span><br><span class="line">super关键字：super为对父类的引用，可以使用super来调用父类的属性，方法，和构造方法。</span><br><span class="line">final关键字：final修饰变量表示变量的值初始化后不能发生变化；final修饰方法表示不能被子类重写；final修饰的类无法被继承。</span><br><span class="line">抽象类：抽象类使用abstract关键字声明，非抽象类继承抽象类必须实现所有抽象方法，抽象类不能被实例化。抽象类不能声明为final。</span><br><span class="line">instanceof关键字：instanceof 是用于检查对象是否为指定的类型，通常在进行类型转换时要使用，以避免发生类型转换异常。</span><br><span class="line">接口(Interface)：接口是一个抽象类型，是抽象方法的集合。接口不是类，接口没有构造方法，不能被实例化，只能被类实现。接口只能包含 static 和 final 变量。</span><br></pre></td></tr></table></figure>

<p>Java中声明一个接口的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface 接口名称 [extends 其他的接口名] &#123;</span><br><span class="line"> 　　全局常量;</span><br><span class="line"> 　　抽象方法;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-常用函数"><a href="#7-常用函数" class="headerlink" title="7.常用函数"></a>7.常用函数</h2><p>接着介绍Java中使用非常频繁的几个函数：</p>
<h4 id="1-输出函数"><a href="#1-输出函数" class="headerlink" title="1.输出函数"></a>1.输出函数</h4><p>控制台的输出由 print() 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。print()打印指定的字符不换行，println()打印完成换一行。<br>下面是使用的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.print(&quot;Remember: &quot;);</span><br><span class="line">System.out.println(&quot;Haste makes waste&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="2-输入函数"><a href="#2-输入函数" class="headerlink" title="2.输入函数"></a>2.输入函数</h4><p>Java中使用java.util.Scanner类获取用户的输入，使用前需要先创建Scanner对象。常用next() 与 nextLine() 方法获取输入的字符串，对应地用hasNext() 与 hasNextLine() 判断是否还有输入的数据。<br>下面是使用next函数获取用户输入字符串的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建scanner对象</span><br><span class="line"> Scanner scan &#x3D; new Scanner(System.in);</span><br><span class="line"> &#x2F;&#x2F; 判断是否还有输入</span><br><span class="line"> if (scan.hasNext()) &#123;</span><br><span class="line">     String inputStr &#x3D; scan.next();</span><br><span class="line">     System.out.println(&quot;you input：&quot; + inputStr);</span><br><span class="line"> &#125;</span><br><span class="line"> &#x2F;&#x2F; 关闭scanner</span><br><span class="line"> scan.close();</span><br></pre></td></tr></table></figure>

<p>还可以使用nextInt接收一个整数，Scanner常用的方法如下表：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000726.png" alt></p>
<h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><p>Java这门语言涵盖的知识点比较丰富，一篇文章是不可能将所有知识点都完全覆盖到的。本文的主要目的是梳理下基础常见的知识点，帮助大家一起复习下，学习一门语言打好基础是至关重要的。掌握了这些基础知识点，自己动手写一些小程序问题也不大。文章最后再附上一个完整代码的小例子，实现的功能是将用户输入的字符串逆序输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Test&#123; </span><br><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">Scanner scan &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">class Test&#123;  </span><br><span class="line">     public static void main(String args[]) &#123;</span><br><span class="line">     			Scanner scan &#x3D; new Scanner(System.in);</span><br><span class="line">    				 String inputStr &#x3D; scan.nextLine();         &#x2F;&#x2F; String转换为char数组         </span><br><span class="line">    					 char[] nums &#x3D; inputStr.toCharArray();         </span><br><span class="line">     				for (int i &#x3D; nums.length; i&gt;0; i--) &#123;             </span><br><span class="line">     		System.out.print(nums[i-1]);         </span><br><span class="line">     &#125;         </span><br><span class="line">     System.out.println(&quot;&quot;);  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-参考文献"><a href="#9-参考文献" class="headerlink" title="9.参考文献"></a>9.参考文献</h2><p><a href="https://blog.csdn.net/m0_46245938/article/details/104179209" target="_blank" rel="noopener">原文地址：</a></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编程基础</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下----telnet服务器的搭建</title>
    <url>/2020/04/21/Linux%E4%B8%8B-telnet%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>前言： Linux使用的是红帽的rhel6.4的版本 </p>
<h1 id="一、telnet服务器的简述"><a href="#一、telnet服务器的简述" class="headerlink" title="一、telnet服务器的简述"></a>一、telnet服务器的简述</h1><p>telnet服务器又称为远程登入服务器，采用telnet协议，Telnet协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。</p>
<h1 id="二、telnet服务器的搭建"><a href="#二、telnet服务器的搭建" class="headerlink" title="二、telnet服务器的搭建"></a>二、telnet服务器的搭建</h1><p>查看有没有安装telnet服务端和客户端的软件，假如没有，就可以装，这里我们可以有两种方式装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#rpm -qa|grep telnet</span><br></pre></td></tr></table></figure>

<h2 id="第一种是直接rpm-e-软件包名安装"><a href="#第一种是直接rpm-e-软件包名安装" class="headerlink" title="第一种是直接rpm -e +软件包名安装"></a>第一种是直接rpm -e +软件包名安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#rpm -ivh telnet-0.17-47.el6_3.1.i686.rpm</span><br></pre></td></tr></table></figure>

<h2 id="还有就是yum安装-，安装之前先要做好yum的源文件"><a href="#还有就是yum安装-，安装之前先要做好yum的源文件" class="headerlink" title="还有就是yum安装 ，安装之前先要做好yum的源文件"></a>还有就是yum安装 ，安装之前先要做好yum的源文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#vi &#x2F;etc&#x2F;yum.repos.d&#x2F;dvd.repo</span><br></pre></td></tr></table></figure>

<h3 id="然后添加以下指令"><a href="#然后添加以下指令" class="headerlink" title="然后添加以下指令"></a>然后添加以下指令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[dvd] &#x2F;&#x2F;总名称</span><br><span class="line">name&#x3D;dvd &#x2F;&#x2F;仓库名字</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;cdrom &#x2F;&#x2F;光驱挂载的位置</span><br><span class="line">gpgcheck&#x3D;0 &#x2F;&#x2F;是否进行gpg校检，0为不检查</span><br><span class="line">enabled&#x3D;1 &#x2F;&#x2F;是否让文件生效，1表示是</span><br></pre></td></tr></table></figure>

<p>然后就是挂载光盘，我们在yum源文件里面设置的是在根目录下的cdrom，<br>所以我们就要在根目录下创建cdrom文件夹，然后把光盘挂载进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#mkdir &#x2F;cdrom &#x2F;&#x2F;新建cdrom文件夹</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#mount &#x2F;dev&#x2F;cdrom &#x2F;cdrom &#x2F;&#x2F;挂载光驱</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#yum info telnet &#x2F;&#x2F;查看安装包的信息</span><br></pre></td></tr></table></figure>

<h2 id="然后就是安装了"><a href="#然后就是安装了" class="headerlink" title="然后就是安装了"></a>然后就是安装了</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#yum install telnet –y</span><br><span class="line"></span><br><span class="line">因为telnet服务需要父进程xinetd，所以，可能会安装不成功，那是因为你没有安装xinetd服务</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#yum install xinetd –y</span><br><span class="line"></span><br><span class="line">然后telnet还需要安装服务端软件 telnet-server</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#yum install telnet-server -y</span><br><span class="line"></span><br><span class="line">\#查看xinetd服务的状态</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# service xinetd status</span><br><span class="line"></span><br><span class="line">启动xinetd服务</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# service xinetd start</span><br><span class="line"></span><br><span class="line">关闭xinetd服务</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# service xinetd stop</span><br><span class="line"></span><br><span class="line">重启xinetd服务</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# service xinetd restart</span><br><span class="line"></span><br><span class="line">\#设Xinetd服务开机自启</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]#chkconfig xinetd on</span><br><span class="line"></span><br><span class="line">\#关闭Xinetd服务开机自启</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]#chkconfig xinetd off</span><br><span class="line"></span><br><span class="line">接下来就是防火墙的配置</span><br><span class="line"></span><br><span class="line">\#查看防火墙</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# iptables-save</span><br><span class="line"></span><br><span class="line">\#允许TCP协议下23号端口通信</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# iptables -I INPUT -p tcp --dport 23 -j ACCEPT</span><br><span class="line"></span><br><span class="line">注意，这个23端口是默认的端口，不安全，假如要改别的端口，直接把23改成别的</span><br><span class="line"></span><br><span class="line">\#保存防火墙配置</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# service iptables save</span><br><span class="line"></span><br><span class="line">\#重启防火墙</span><br><span class="line"></span><br><span class="line">[root@localhost Packages]# service iptables restart</span><br><span class="line"></span><br><span class="line">开启telnet服务</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;xinetd.d&#x2F;telnet</span><br></pre></td></tr></table></figure>

<h2 id="编辑telnet配置文件"><a href="#编辑telnet配置文件" class="headerlink" title="编辑telnet配置文件"></a>编辑telnet配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service telnet</span><br><span class="line">&#123;</span><br><span class="line">flags &#x3D; REUSE</span><br><span class="line">socket_type &#x3D; stream</span><br><span class="line">wait &#x3D; no</span><br><span class="line">user &#x3D; root</span><br><span class="line">server &#x3D; &#x2F;usr&#x2F;sbin&#x2F;in.telnetd</span><br><span class="line">log_on_failure +&#x3D; USERID</span><br><span class="line">disable &#x3D; NO</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：将“disable”的值改为“NO </span><br><span class="line"></span><br><span class="line">\#i键是插入模式，esc是命令模式，输入:wq保存退出</span><br><span class="line"></span><br><span class="line">然后重启服务</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# service xinetd restart</span><br><span class="line"></span><br><span class="line">测试，在客户机上输入telnet 192.168.1.118</span><br><span class="line"></span><br><span class="line">\#客户机上要安装了客户端软件</span><br><span class="line"></span><br><span class="line">注意：默认严禁使用“root”用户远程登录服务器</span><br></pre></td></tr></table></figure>

<h1 id="三、telnet服务器安全配置"><a href="#三、telnet服务器安全配置" class="headerlink" title="三、telnet服务器安全配置"></a>三、telnet服务器安全配置</h1><h2 id="修改Telnet服务器的TCP通信端口"><a href="#修改Telnet服务器的TCP通信端口" class="headerlink" title="修改Telnet服务器的TCP通信端口"></a>修改Telnet服务器的TCP通信端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;services</span><br><span class="line">telnet 3000&#x2F;tcp</span><br><span class="line">telnet 3000&#x2F;udp</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#service xinetd restart</span><br></pre></td></tr></table></figure>

<h2 id="修改防火墙"><a href="#修改防火墙" class="headerlink" title="修改防火墙"></a>修改防火墙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# iptables -I INPUT -p tcp --dport 3000 -j ACCEPT</span><br><span class="line">[root@localhost ~]# iptables -I INPUT -p udp --dport 3000 -j ACCEPT</span><br><span class="line">[root@localhost ~]# service iptables save</span><br></pre></td></tr></table></figure>

<h2 id="测试：在客户端虚拟机上的终端窗口中输入："><a href="#测试：在客户端虚拟机上的终端窗口中输入：" class="headerlink" title="测试：在客户端虚拟机上的终端窗口中输入："></a>测试：在客户端虚拟机上的终端窗口中输入：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# telnet 192.168.1.118 3000</span><br></pre></td></tr></table></figure>

<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#vi &#x2F;etc&#x2F;xinetd.d&#x2F;telnet</span><br><span class="line">bind &#x3D; 192.168.1.118 #定义telnet服务器的登录地址</span><br><span class="line">only_from &#x3D; 192.168.2.0&#x2F;24 #只允许 192.168.2.0 这个网段进入</span><br><span class="line">only_from &#x3D; .edu.cn #只有教育网才能进入！</span><br><span class="line">no_access &#x3D; 192.168.2.&#123;120,130&#125; #黑名单，这两个ip不可登陆</span><br><span class="line">access_times&#x3D; 8:00-12:00 20:00-23:59 # 每天只有这两个时间段开放服务</span><br></pre></td></tr></table></figure>

<h2 id="telnet-root用户的登入"><a href="#telnet-root用户的登入" class="headerlink" title="telnet root用户的登入"></a>telnet root用户的登入</h2><p>telnet 不是很安全，默认的情况之下不允许 root 以 telnet 进入 Linux 主机 。若要允许root用户登入，可用下列方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@wljs root]# mv &#x2F;etc&#x2F;securetty &#x2F;etc&#x2F;securetty.bak</span><br><span class="line">这样， root 就可以直接进入 Linux 主机了。不过，建议不要这样做。也可以在普通用户进入后，切换到root用户,拥有root的权限。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>服务器</category>
        <category>telnet</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>服务器</tag>
        <tag>telnet</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下——Apache服务器的搭建</title>
    <url>/2020/04/21/Linux%E4%B8%8B%E2%80%94%E2%80%94Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="第一步：我们先检查是否安装-apache服务器的软件"><a href="#第一步：我们先检查是否安装-apache服务器的软件" class="headerlink" title="第一步：我们先检查是否安装 apache服务器的软件"></a>第一步：我们先检查是否安装 apache服务器的软件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa|grep httpd</span><br></pre></td></tr></table></figure>

<h1 id="第二步：使用yum方式安装apache服务器软件"><a href="#第二步：使用yum方式安装apache服务器软件" class="headerlink" title="第二步：使用yum方式安装apache服务器软件"></a>第二步：使用yum方式安装apache服务器软件</h1><h2 id="制作yum源文件并创建存储库"><a href="#制作yum源文件并创建存储库" class="headerlink" title="制作yum源文件并创建存储库"></a>制作yum源文件并创建存储库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir &#x2F;cdrom</span><br></pre></td></tr></table></figure>

<h2 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mount &#x2F;dev&#x2F;cdrom &#x2F;cdrom</span><br><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;yum.repos.d&#x2F;dvd.repo</span><br><span class="line">[dvd]</span><br><span class="line">name&#x3D;dvd</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;cdrom</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabeld&#x3D;1</span><br><span class="line">[root@localhost ~]# yum install httpd –y  #安装httpd服务</span><br></pre></td></tr></table></figure>

<h1 id="第三步：重新启动httpd服务"><a href="#第三步：重新启动httpd服务" class="headerlink" title="第三步：重新启动httpd服务"></a>第三步：重新启动httpd服务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# service httpd restart</span><br><span class="line">Apache服务器的IP地址为：192.168.1.118</span><br><span class="line">Apache 服务器的虚拟主机IP地址为：192.168.1.148</span><br><span class="line">Apache 服务器的虚拟主机IP地址为：192.168.1.149</span><br><span class="line">Apache 服务器的域名为jcxy.com</span><br><span class="line">主机头：www.jcxy.com</span><br><span class="line">虚拟主机头：www1.jcxy.com</span><br><span class="line">虚拟主机头：www2.jcxy.com</span><br><span class="line">个人主页：个人用户bob  密码：123456</span><br></pre></td></tr></table></figure>

<h2 id="不启用selinux安全"><a href="#不启用selinux安全" class="headerlink" title="不启用selinux安全"></a>不启用selinux安全</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234422.png" alt></p>
<p>改：SELINUX=permissive</p>
<h1 id="4-修改apache服务器主配置文件"><a href="#4-修改apache服务器主配置文件" class="headerlink" title="4.修改apache服务器主配置文件"></a>4.修改apache服务器主配置文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# vi &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br><span class="line">改</span><br><span class="line">ServerName www.jcxy.com:80</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200526234439.png" style="zoom:200%;">

<p>设置Apache默认站点的名称和端口号，这里的名称可以时IP地址，也可以是域名，如果是域名还需DNS的支持。 要做dns 添加一个A记录<a href="http://www.jcxy.com的主机头" target="_blank" rel="noopener">www.jcxy.com的主机头</a>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;&#x2F;var&#x2F;www&#x2F;html</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200526234452.png" style="zoom:200%;">

<p>设置WEB站点的文档根目录。 可更改也可不更改 更改要更改文件夹selinux上下文属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DirectoryIndex index.html index.html.var</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200526234514.png" style="zoom:200%;">

<p>设置每个目录中默认的网页文件名称，排在前面的优先 默认读取的是index.html网页文件</p>
<p>UserDir disabled #用到个人主页的话将这行注释,使个人主页生效， UserDir public_html #将这行注释去掉使个人账号下的public_html目录下的index.html文件能在导航条运行</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234523.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:www.jcxy.com&#x2F;~bob(用户个人主页自己定义)</span><br><span class="line">格式：192.168.1.118&#x2F;~bob  #用IP地址登陆</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234533.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &#x2F;home&#x2F;*&#x2F;public_html&gt;</span><br><span class="line"></span><br><span class="line">    AllowOverride FileInfo AuthConfig Limit</span><br><span class="line"></span><br><span class="line">    Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec</span><br><span class="line"></span><br><span class="line">    &lt;Limit GET POST OPTIONS&gt;</span><br><span class="line"></span><br><span class="line">        Order allow,deny</span><br><span class="line"></span><br><span class="line">        Allow from all</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;Limit&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LimitExcept GET POST OPTIONS&gt;</span><br><span class="line"></span><br><span class="line">        Order deny,allow</span><br><span class="line"></span><br><span class="line">        Deny from all</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;LimitExcept&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">#对个人主页的目录设置</span><br><span class="line"></span><br><span class="line">#意思是home下的个人用户目录下public_html目录下的index.html文件成为网页</span><br></pre></td></tr></table></figure>

<h1 id="首先创建一个测试页"><a href="#首先创建一个测试页" class="headerlink" title="首先创建一个测试页"></a>首先创建一个测试页</h1><p>在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cmx2 ~]# useradd bob</span><br><span class="line">[root@cmx2 ~]# passwd bob</span><br><span class="line">[root@ns ~]# cd &#x2F;home&#x2F;bob</span><br><span class="line">[root@ns bob]# mkdir public_html   #创建个人目录下的public_html目录</span><br><span class="line">[root@ns bob]# cd public_html  </span><br><span class="line">[root@ns public_html]# echo 陈陈陈 &gt;index.html   #测试页</span><br><span class="line">[root@ns public_html]# chcon -R -h -t httpd_sys_content_t      &#x2F;home&#x2F;*&#x2F;public_html</span><br></pre></td></tr></table></figure>

<p>更改selinux上下文的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns bob]# chown bob:bob &#x2F;home&#x2F;bob&#x2F;public_html&#x2F;index.html</span><br><span class="line">[root@ns public_html]# chown bob:bob &#x2F;home&#x2F;bob&#x2F;public_html</span><br></pre></td></tr></table></figure>

<p>更改个人主页的属主属组 这里是bob的个人主页 所以属主属组bob</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns bob]# chmod 711 &#x2F;home&#x2F;bob</span><br></pre></td></tr></table></figure>

<p>用户主目录普通用户可读可写可执行 别的用户只能执行的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cmx2 public_html]# service httpd restart  #重启服务</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234547.png" alt></p>
<p>简单的个人主页编写完成!</p>
<h1 id="编写一个提供简单的虚拟目录"><a href="#编写一个提供简单的虚拟目录" class="headerlink" title="编写一个提供简单的虚拟目录"></a>编写一个提供简单的虚拟目录</h1><p>在vi /etc/httpd/conf/httpd.conf 下编辑</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234559.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alias &#x2F;chen2&#x2F; &quot;&#x2F;c1&#x2F;public_html&#x2F;index.html&quot;#虚拟目录名称自定义  绝对路径自己创建</span><br></pre></td></tr></table></figure>

<h2 id="为“-c1-public-html-index-html”目录建立别名。"><a href="#为“-c1-public-html-index-html”目录建立别名。" class="headerlink" title="为“/c1/public_html/index.html”目录建立别名。"></a>为“/c1/public_html/index.html”目录建立别名。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;&#x2F;c1&#x2F;public_html&#x2F;index.html&quot;&gt; </span><br><span class="line">Options Indexes MultiViews FollowSymLinks</span><br></pre></td></tr></table></figure>

<p>三个选项 Indexes 服务器生成此目录的文件列表</p>
<p>#MultiViews 服务器可使用符合链接链接到不在此目录的文件或目录,此参数若设在“localhost”区域中则无效</p>
<p>Allowover None 控制项”none” 表示禁止使用全部指令,即禁止处理.htaccess文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AllowOverride None</span><br><span class="line">     Order allow,deny</span><br><span class="line">     Allow from all</span><br><span class="line"> </span><br><span class="line"> 绝对路径在 &#x2F;c1&#x2F;public_html&#x2F;index.html</span><br><span class="line"> 虚拟目录名为&#x2F;chen2</span><br></pre></td></tr></table></figure>

<h2 id="在终端输入："><a href="#在终端输入：" class="headerlink" title="在终端输入："></a>在终端输入：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ns ~]# mkdir -p &#x2F;c1&#x2F;public_html  #创建绝对路径</span><br><span class="line">[root@ns ~]# cd &#x2F;c1&#x2F;public_html</span><br><span class="line">[root@ns public_html]# echo &#39;陈梦祥page!&#39;&gt;index.html #创建测试页 有符号加单引号括起来!</span><br><span class="line">[root@ns public_html]# chmod -R 777 &#x2F;c1&#x2F;public_html</span><br><span class="line">[root@ns public_html]# chcon -R -h -t httpd_sys_contnet_t &#x2F;c1&#x2F;public_html</span><br><span class="line">[root@ns public_html]# service httpd restart  #重启服务</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h2><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234616.png" alt></p>
<h1 id="创建一个虚拟目录提供两个账号登录"><a href="#创建一个虚拟目录提供两个账号登录" class="headerlink" title="创建一个虚拟目录提供两个账号登录"></a>创建一个虚拟目录提供两个账号登录</h1><p>在vi /etc/httpd/conf/httpd.conf 下编辑</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234624.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alias &#x2F;chen3 &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;test&quot;</span><br><span class="line">&lt;Directory &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;test&quot;&gt; </span><br><span class="line">Order allow,deny</span><br><span class="line">Allow from all</span><br><span class="line">AllowOverride None</span><br><span class="line">AuthType Basic</span><br><span class="line">设置认证方式</span><br><span class="line">AuthName &quot;Please input username and password&quot;</span><br><span class="line">认证需要用户名和密码</span><br><span class="line">AuthUserFile &#x2F;etc&#x2F;httpd&#x2F;userpasswd</span><br><span class="line">httpd用户口令文件的路径</span><br><span class="line">Require valid-user</span><br><span class="line">Satisfy all</span><br><span class="line">同时使用主机名和用户名&#x2F;口令进行访问控制；若使用“Stisfy any”，则满足其一就允许访问。</span><br><span class="line">&lt;&#x2F;Directory&gt; </span><br><span class="line"> 虚拟目录名为:&#x2F;chen3</span><br><span class="line"> 用户：CMX1 密码：123456</span><br><span class="line"> 用户：CMX2 密码：123456</span><br><span class="line"> 绝对路径在: &#x2F;c2&#x2F;public_html&#x2F;index.html</span><br></pre></td></tr></table></figure>

<h2 id="在终端输入：-1"><a href="#在终端输入：-1" class="headerlink" title="在终端输入："></a>在终端输入：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ns ~]# mkdir -p &#x2F;var&#x2F;www&#x2F;html&#x2F;test</span><br><span class="line">root@ns ~]# cd &#x2F;var&#x2F;www&#x2F;html&#x2F;test</span><br><span class="line">[root@ns test]# echo &#39;this is my test page!&#39;&gt;index.html</span><br><span class="line">[root@ns public_html]# useradd CMX1</span><br><span class="line">[root@ns public_html]# useradd CMX2</span><br><span class="line">[root@ns public_html]# passwd CMX1</span><br><span class="line">[root@ns public_html]# passwd CMX2</span><br><span class="line">[root@ns public_html]# htpasswd -c &#x2F;etc&#x2F;httpd&#x2F;userpasswd CMX1 #添加虚拟目录 用户与密码</span><br><span class="line">[root@ns public_html]# htpasswd &#x2F;etc&#x2F;httpd&#x2F;userpasswd CMX2  #添加虚拟目录用户与密码</span><br></pre></td></tr></table></figure>

<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234636.png" alt></p>
<p>虚拟目录提供密码与密码的网页完成. </p>
<p>搭建web虚拟主机</p>
<p>添加网卡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns public_html]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234645.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IPaddr：192.168.1.148</span><br><span class="line">IPaddr：192.168.1.149</span><br><span class="line">添加dns主机头 </span><br><span class="line">www1.jcxy.com </span><br><span class="line">www2.jcxy.com </span><br><span class="line">前提是你DNS在完成搭建的情况下</span><br><span class="line">[root@ns public_html]#vi &#x2F;var&#x2F;named&#x2F;jcxy.com.zone  编辑添加</span><br><span class="line">www1     IN    A       192.168.1.148</span><br><span class="line">www2     IN    A       192.168.1.148</span><br><span class="line">[root@ns public_html]# vi &#x2F;var&#x2F;named&#x2F;1.168.192.zone  编辑添加</span><br><span class="line">148   IN   PTR    www1.jcxy.com.</span><br><span class="line">148   IN   PTR    www2.jcxy.com.</span><br></pre></td></tr></table></figure>

<h1 id="基于IP地址的web虚拟主机"><a href="#基于IP地址的web虚拟主机" class="headerlink" title="基于IP地址的web虚拟主机"></a>基于IP地址的web虚拟主机</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vi &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 下编辑</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234653.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#自己定义的虚拟网卡     </span><br><span class="line">ServerAdmin webmaster@www.jcxy.com  </span><br><span class="line">#主域名服务器的基础上     </span><br><span class="line">DocumentRoot &#x2F;var&#x2F;www&#x2F;cmx1  </span><br><span class="line">#web服务器放html页面的根目录 ,可以自己定义但你要改权限与selinux上下文属性     ServerName 192.168.1.148  </span><br><span class="line">#虚拟主机的IP地址     </span><br><span class="line">ErrorLog logs&#x2F;192.168.1.148-error_log  </span><br><span class="line">#错误日志存放位置 自动生成     </span><br><span class="line">CustomLog logs&#x2F;192.168.1.148-access_log common </span><br><span class="line">#链接日志位置  自动生成记录数  </span><br><span class="line"> &lt;&#x2F;VirtualHost&gt; </span><br><span class="line">#自己定义的虚拟网卡</span><br><span class="line">     ServerAdmin webmaster@www.jcxy.com </span><br><span class="line">#主域名服务器的基础上</span><br><span class="line">     DocumentRoot &#x2F;var&#x2F;www&#x2F; cmx2   </span><br><span class="line"> web服务器放html页面的根目录</span><br><span class="line"> ServerName 192.168.1.149 ErrorLog logs&#x2F;192.168.1.149-error_log</span><br><span class="line"> 错误日志</span><br><span class="line"> CustomLog logs&#x2F;192.168.1.149-access_log common</span><br><span class="line"> 链接日志</span><br><span class="line"> &lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在终端输入：-2"><a href="#在终端输入：-2" class="headerlink" title="在终端输入："></a>在终端输入：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# cd &#x2F;var&#x2F;www</span><br><span class="line">[root@ns www]# mkdir cmx1  #创建我们存放html的目录  selinux上下文属性不需要更改此文件夹自带http脚本权限.</span><br><span class="line">[root@ns www]# cd cmx1</span><br><span class="line">[root@ns cmx1]# echo &#39;cmx1 page !&#39;&gt;index.html  #创建测试页  index.html (服务器只会读取index.html的网页文件)</span><br></pre></td></tr></table></figure>

<h2 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h2><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234704.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# cd &#x2F;var&#x2F;www</span><br><span class="line">[root@ns www]# mkdir cmx2  #创建我们存放html的目录  selinux上下文属性不需要更改此文件夹自带http脚本权限.</span><br><span class="line">[root@ns www]# cd cmx2</span><br><span class="line">[root@ns cmx2]# echo &#39;this is cmx2 page!&#39;&gt;index.html  #创建测试页  index.html (服务器只会读取index.html的网页文件)</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试:"></a>测试:</h2><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234713.png" alt></p>
<h1 id="基于域名的web虚拟主机"><a href="#基于域名的web虚拟主机" class="headerlink" title="基于域名的web虚拟主机"></a>基于域名的web虚拟主机</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加主机头：www1.jcxy.com</span><br><span class="line">          www2.jcxy.com</span><br></pre></td></tr></table></figure>

<h1 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h1><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234726.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> #虚拟主机的IP与端口     </span><br><span class="line">ServerAdmin webmaster@www.jcxy.com </span><br><span class="line">#主域名服务器的基础上     </span><br><span class="line">DocumentRoot &#x2F;var&#x2F;www&#x2F;cmx3  </span><br><span class="line">#web服务器放html页面的根目录 可以更改但要有这个目录 权限和selinux上下文也要改.     ServerName www1.jcxy.com  </span><br><span class="line">#虚拟主机的主机域     </span><br><span class="line">ErrorLog logs&#x2F;www1.jcxy.com-error_log       </span><br><span class="line">CustomLog logs&#x2F;www1.jcxy.com-access_log common </span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在终端输入：-3"><a href="#在终端输入：-3" class="headerlink" title="在终端输入："></a>在终端输入：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# cd &#x2F;var&#x2F;www</span><br><span class="line">[root@ns www]# mkdir cmx3</span><br><span class="line">[root@ns www]# cd cmx3</span><br><span class="line">[root@ns cmx3]# echo &#39;this is cmx3 page!&#39;&gt;index.html</span><br></pre></td></tr></table></figure>

<h2 id="测试：-2"><a href="#测试：-2" class="headerlink" title="测试："></a>测试：</h2><img src="https://gitee.com/laosuye/TC/raw/master/20200526234734.png" style="zoom:200%;">

<h2 id="在终端输入：-4"><a href="#在终端输入：-4" class="headerlink" title="在终端输入："></a>在终端输入：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns cmx3]# cd &#x2F;var&#x2F;www</span><br><span class="line">[root@ns www]# mkdir cmx4</span><br><span class="line">[root@ns www]# cd cmx4</span><br><span class="line">[root@ns cmx4]# echo &#39;this is cmx4 page!&#39;&gt;index.html</span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><img src="https://gitee.com/laosuye/TC/raw/master/20200526234747.png" style="zoom:200%;">

<h1 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口改为192.168.1.148： 8080</span><br><span class="line">       192.168.1.148： 9999</span><br></pre></td></tr></table></figure>

<h2 id="先改端口"><a href="#先改端口" class="headerlink" title="先改端口"></a>先改端口</h2><p>在vi /etc/services</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http         8080&#x2F;tcp          www www-http    # WorldWideWeb HTTP</span><br><span class="line">http         8080&#x2F;udp          www www-http    # HyperText Transfer P</span><br></pre></td></tr></table></figure>

<h2 id="防火墙放行两个端口"><a href="#防火墙放行两个端口" class="headerlink" title="防火墙放行两个端口"></a>防火墙放行两个端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;services</span><br><span class="line">[root@ns ~]# iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">[root@ns ~]# iptables -I INPUT -p udp --dport 8080 -j ACCEPT</span><br><span class="line">[root@ns ~]# iptables -I INPUT -p tcp --dport 9999 -j ACCEPT</span><br><span class="line">[root@ns ~]# iptables -I INPUT -p udp --dport 9999 -j ACCEPT</span><br><span class="line">[root@ns ~]# service iptables save</span><br></pre></td></tr></table></figure>

<p>在vi /etc/httpd/conf/httpd.conf 下编辑</p>
<p>还是采用虚拟主机 IP地址 192.168.1.148</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526234759.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listen 8080   #加8080监听端口</span><br><span class="line"> Listen 9999   #加9999监听端口</span><br><span class="line"> &lt;VirtualHost 192.168.1.148:8080&gt; </span><br><span class="line">     ServerAdmin webmaster@www.jcxy.com     </span><br><span class="line">DocumentRoot &#x2F;var&#x2F;www&#x2F;cmx5     </span><br><span class="line">ServerName 192.168.1.148     </span><br><span class="line">ErrorLog logs&#x2F;192.168.1.148-8080-error_log     </span><br><span class="line">CustomLog logs&#x2F;192.168.1.148-8080-access_log common </span><br><span class="line"> &lt;&#x2F;VirtualHost&gt; </span><br><span class="line"> &lt;VirtualHost 192.168.1.148:9999&gt; </span><br><span class="line">     ServerAdmin webmaster@www.jcxy.com     </span><br><span class="line">DocumentRoot &#x2F;var&#x2F;www&#x2F;cmx6     </span><br><span class="line">ServerName 192.168.1.148     </span><br><span class="line">ErrorLog logs&#x2F;192.168.1.148-9999-error_log     CustomLog logs&#x2F;192.168.1.148-9999-access_log common </span><br><span class="line"> &lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在终端输入"><a href="#在终端输入" class="headerlink" title="在终端输入"></a>在终端输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# cd &#x2F;var&#x2F;www</span><br><span class="line">[root@ns www]# mkdir cmx5</span><br><span class="line">[root@ns www]# cd cmx5</span><br><span class="line">[root@ns cmx5]# echo &#39;this is cmx5 page!&#39;&gt;index.html</span><br></pre></td></tr></table></figure>

<h2 id="测试：-3"><a href="#测试：-3" class="headerlink" title="测试："></a>测试：</h2><img src="https://gitee.com/laosuye/TC/raw/master/20200526234809.png" style="zoom:200%;">

<h2 id="在终端下输入"><a href="#在终端下输入" class="headerlink" title="在终端下输入:"></a>在终端下输入:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# cd &#x2F;var&#x2F;www</span><br><span class="line">[root@ns www]# mkdir cmx6</span><br><span class="line">[root@ns www]# cd cmx6</span><br><span class="line">[root@ns cmx6]# echo &#39;this is cmx6 page!&#39;&gt;index.html</span><br></pre></td></tr></table></figure>

<h2 id="测试：-4"><a href="#测试：-4" class="headerlink" title="测试："></a>测试：</h2><img src="https://gitee.com/laosuye/TC/raw/master/20200526234823.png" style="zoom:200%;">

<h2 id="访问安全控制："><a href="#访问安全控制：" class="headerlink" title="访问安全控制："></a>访问安全控制：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">101    &lt;Directory &quot;&#x2F;usr&#x2F;local&#x2F;test&quot;&gt;  </span><br><span class="line">102    order allow,deny </span><br><span class="line">103    allow from 192.168.1.0&#x2F;24 </span><br><span class="line">104    deny from all  </span><br><span class="line">105    &lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200526234832.png" style="zoom:150%;">

<p>自此，Apache服务器各个情况搭建完毕</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>服务器</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Linux</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下——磁盘管理与crontab调度</title>
    <url>/2020/04/27/Linux%E4%B8%8B%E2%80%94%E2%80%94%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%E4%B8%8Ecrontab%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>例：某台linux服务器 加了一块1个T的硬盘 要求分四个区 内存大小相同.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# fdisk –l  #查看所有本地硬盘路径</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001644.png" alt></p>
<p>如上所得 我们新加的硬盘路径是 /dev/sdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# fdisk &#x2F;dev&#x2F;sdb   #选择目标硬盘  也就是我们要分的硬盘!</span><br><span class="line"> Command (m for help): n  #新建分区</span><br><span class="line"> Command action</span><br><span class="line">    e   extended</span><br><span class="line">    p   primary partition (1-4)</span><br><span class="line"> p  #标准分区</span><br><span class="line"> Partition number (1-4): 1  #问你这是你要分第几个区  我们这里是分第一个区</span><br><span class="line"> First cylinder (1-133674, default 1): 1  #内存大小  因为第一块  从1开始</span><br><span class="line"> Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-133674, default 133674): 33418.5  #内存大小到哪里结束,我们是分四块所有133674除4 平均每一块的大小.</span><br><span class="line"> Command (m for help): n  #继续新建分区</span><br><span class="line"> Command action</span><br><span class="line">    e   extended</span><br><span class="line">    p   primary partition (1-4)</span><br><span class="line"> p     #创建标准分区</span><br><span class="line"> Partition number (1-4): 2  #第二块分区</span><br><span class="line"> First cylinder (33419-133674, default 33419): 33419   #硬盘大小从哪开始</span><br><span class="line"> Last cylinder, +cylinders or +size&#123;K,M,G&#125; (33419-133674, default 133674): 66837  #硬盘大小到哪结束.  第二块就是33418.5+33418.5的内存结束 第三块分区</span><br><span class="line"> Command (m for help): n  #继续新建分区</span><br><span class="line"> Command action</span><br><span class="line">    e   extended</span><br><span class="line">    p   primary partition (1-4)</span><br><span class="line"> p  #创建标准分区</span><br><span class="line"> Partition number (1-4): 3   #第三块分区</span><br><span class="line"> First cylinder (66838-133674, default 66838): 66838   #硬盘大小从哪开始</span><br><span class="line"> Last cylinder, +cylinders or +size&#123;K,M,G&#125; (66838-133674, default 133674): 100255.5    #硬盘大小到哪结束.  第三块就是33418.5+33418.5+33418.5的内存结束 第二块分区</span><br><span class="line"> Command (m for help): n  #继续新建分区</span><br><span class="line"> Command action </span><br><span class="line">    e   extended</span><br><span class="line">    p   primary partition (1-4)</span><br><span class="line"> p  #创建标准分区</span><br><span class="line"> Selected partition 4  #第四块分区</span><br><span class="line"> First cylinder (100256-133674, default 100256): 100256  #硬盘大小从哪开始</span><br><span class="line"> Last cylinder, +cylinders or +size&#123;K,M,G&#125; (100256-133674, default 133674): 133674</span><br><span class="line"> 硬盘大小到哪结束.  第四块就是33418.5+33418.5+33418.5+33418.5的内存结束 第四块分区</span><br><span class="line"> Command (m for help): w  #保持并退出分区选项</span><br><span class="line"> The partition table has been altered!</span><br><span class="line"> [root@ns ~]# fdisk –l  #查看所有硬盘路径,找到我们刚刚分的四块硬盘路径 格式化</span><br><span class="line"> [root@ns ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb1  #格式化我们分的第一块硬盘</span><br><span class="line"> [root@ns ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb2  #格式化我们分的第二块硬盘</span><br><span class="line"> [root@ns ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb3  #格式化我们分的第三块硬盘</span><br><span class="line"> [root@ns ~]# mkfs -t ext4 &#x2F;dev&#x2F;sdb4  #格式化我们分的第四块硬盘</span><br></pre></td></tr></table></figure>

<p>测试：计算机里有1T大小的硬盘分为了4块大小一致的硬盘</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527001650.png" style="zoom:150%;">

<p>磁盘管理 搭建完毕！</p>
<p>Cron调度</p>
<p>例：我们每个星期五14点30分都要自动备份/home目录去另一块磁盘 ！</p>
<p>第一个*：分钟0～59</p>
<p>第二个*：小时0～23</p>
<p>第三个*：日期1～31</p>
<p>第四个*：月份1～12</p>
<p>第五个*：星期0～7；注意0和7都表示星期天。</p>
<p>第六个代表命令名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# crontab –e  </span><br><span class="line">[root@ns ~]# crontab -l</span><br><span class="line">*&#x2F;1 * * * * cp -r &#x2F;home &#x2F;media&#x2F;8eea878a-6a78-4ea7-bd4f-69a65f6d4c66 #我先做了个每分钟的自动备份</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527001659.png" style="zoom:200%;">

<p>现在按照要求来： 每个礼拜五14：30备份一次/home目录去/media/8eea878a-6a78-4ea7-bd4f-69a65f6d4c66</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# crontab –e  #在这里下面编辑  </span><br><span class="line">*&#x2F;30 *&#x2F;14 * * *&#x2F;5 cp -r &#x2F;home &#x2F;media&#x2F;8eea878a-6a78-4ea7-bd4f-69a65f6d4c66</span><br><span class="line">[root@ns ~]# crontab –l  #查看我们调度的内容!</span><br><span class="line">*&#x2F;30 *&#x2F;14 * * *&#x2F;5 cp -r &#x2F;home &#x2F;media&#x2F;8eea878a-6a78-4ea7-bd4f-69a65f6d4c66</span><br><span class="line">[root@ns ~]# crontab –l  #查看我们调度的内容! 例：每2分钟拷贝一次</span><br><span class="line">*&#x2F;2 * * * * tar -czf &#x2F;backup&#x2F;home-data.tar.gz &#x2F;home  #拷贝的压缩包格式</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>磁盘</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下用户和组的管理</title>
    <url>/2020/04/24/Linux%E4%B8%8B%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="Linux系统：centos"><a href="#Linux系统：centos" class="headerlink" title="Linux系统：centos"></a>Linux系统：centos</h1><h2 id="1-用户的分类"><a href="#1-用户的分类" class="headerlink" title="1.用户的分类"></a>1.用户的分类</h2><p>在Linux下用户角色划分如下：</p>
<h3 id="超级用户："><a href="#超级用户：" class="headerlink" title="超级用户："></a>超级用户：</h3><p>root 拥有对系统的最高的管理权限（UID=0）如果我们把普通用户的UID改为0系统也会将其视为root用户。</p>
<h3 id="普通用户-："><a href="#普通用户-：" class="headerlink" title="普通用户 ："></a><strong>普通用户</strong> ：</h3><p>系统用户（UID 1-999），在Centos6中为1-499；本地用户 （UID 1000+）,Centos6中为500+ （注：UID：即每个用户的身份标示）</p>
<h3 id="虚拟用户："><a href="#虚拟用户：" class="headerlink" title="虚拟用户："></a>虚拟用户：</h3><p>也称做伪用户，一般不会用来登录系统，由系统中的服务使用，比如apache、zabbix等。</p>
<h2 id="2-用户和组的对应关系"><a href="#2-用户和组的对应关系" class="headerlink" title="2.用户和组的对应关系"></a>2.用户和组的对应关系</h2><h3 id="一对多一："><a href="#一对多一：" class="headerlink" title="一对多一："></a>一对多一：</h3><p>一个用户可以存在一个组中； </p>
<h3 id="一对多："><a href="#一对多：" class="headerlink" title="一对多："></a>一对多：</h3><p>一个用户可以存在多个组中；</p>
<h3 id="多对一："><a href="#多对一：" class="headerlink" title="多对一："></a>多对一：</h3><p>多个用户可以存在一个组中；</p>
<h3 id="多对多："><a href="#多对多：" class="headerlink" title="多对多："></a>多对多：</h3><p>多个用户可以存在多个组中；</p>
<h3 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h3><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000853.png" alt></p>
<h3 id="下面是上述文件参数的详解："><a href="#下面是上述文件参数的详解：" class="headerlink" title="下面是上述文件参数的详解："></a>下面是上述文件参数的详解：</h3><h4 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# cat &#x2F;etc&#x2F;passwd |head</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash                            </span><br><span class="line">bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin</span><br><span class="line">adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin</span><br><span class="line">lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin</span><br><span class="line">sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync</span><br><span class="line">shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown</span><br><span class="line">halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt</span><br><span class="line">mail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin</span><br><span class="line">operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin</span><br></pre></td></tr></table></figure>

<h5 id="该文件一行记录着一个用户，每行又以：分割成7列，其中每一列的参数含义："><a href="#该文件一行记录着一个用户，每行又以：分割成7列，其中每一列的参数含义：" class="headerlink" title="该文件一行记录着一个用户，每行又以：分割成7列，其中每一列的参数含义："></a>该文件一行记录着一个用户，每行又以：分割成7列，其中每一列的参数含义：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户名：密码占位符：UID：GID：描述信息（在图形界面我们登录前由原来的用户名变为我们自定义的描述信息）：</span><br><span class="line">用户的家目录：登录shell</span><br></pre></td></tr></table></figure>

<h4 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# cat &#x2F;etc&#x2F;group|head</span><br><span class="line">root:x:0:</span><br><span class="line">bin:x:1:</span><br><span class="line">daemon:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br><span class="line">mem:x:8:</span><br><span class="line">kmem:x:9:</span><br></pre></td></tr></table></figure>

<h5 id="每一列的参数含义："><a href="#每一列的参数含义：" class="headerlink" title="每一列的参数含义："></a>每一列的参数含义：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组名：组的密码的占位符：GID：组内的成员列表</span><br></pre></td></tr></table></figure>

<h4 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# cat &#x2F;etc&#x2F;shadow</span><br><span class="line">root:sadadasdawerqwrxsadi0:18301:0:99999:7:::</span><br><span class="line">bin::17834:0:99999:7::: daemon::17834:0:99999:7:::</span><br><span class="line">adm::17834:0:99999:7::: lp::17834:0:99999:7:::</span><br><span class="line">sync::17834:0:99999:7::: shutdown::17834:0:99999:7:::</span><br><span class="line">halt::17834:0:99999:7::: mail::17834:0:99999:7:::</span><br></pre></td></tr></table></figure>

<h5 id="每一列的参数含义：-1"><a href="#每一列的参数含义：-1" class="headerlink" title="每一列的参数含义："></a>每一列的参数含义：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">账号名称：加密的密码：最近更改密码的时间；从1970&#x2F;1&#x2F;1到上次修改密码的天数，（可用date -d &quot;1970-01-01 [选项中对应的数字] days&quot; 命令查看）：密码不可被修改的天数：密码有效期：密码过期之前警告天数：密码过期的期限天数：帐号失效时间；从1970&#x2F;1&#x2F;1日起，到用户被禁用的天数：保留字段</span><br></pre></td></tr></table></figure>

<h4 id="etc-gshadow"><a href="#etc-gshadow" class="headerlink" title="/etc/gshadow"></a>/etc/gshadow</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# cat &#x2F;etc&#x2F;gshadow</span><br><span class="line">root:::</span><br><span class="line">bin:::</span><br><span class="line">daemon:::</span><br><span class="line">sys:::</span><br><span class="line">adm:::</span><br><span class="line">tty:::</span><br><span class="line">disk:::</span><br><span class="line">lp:::</span><br><span class="line">mem:::</span><br><span class="line">kmem:::</span><br><span class="line">wheel:::</span><br></pre></td></tr></table></figure>

<h5 id="每一列的参数含义：-2"><a href="#每一列的参数含义：-2" class="headerlink" title="每一列的参数含义："></a>每一列的参数含义：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组账号名称：加密后的密码（显示！或者为空表示没有密码）：该组的管理员列表，该字段可以为空，如果有多个管理员则用，隔开：该组的成员列表，多个用户用，隔开</span><br></pre></td></tr></table></figure>

<h3 id="etc-skel目录："><a href="#etc-skel目录：" class="headerlink" title="/etc/skel目录："></a>/etc/skel目录：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# ll -a &#x2F;etc&#x2F;skel&#x2F;</span><br><span class="line">总用量 28</span><br><span class="line">drwxr-xr-x.  2 root root  4096 11月  5 23:09 .</span><br><span class="line">drwxr-xr-x. 95 root root 12288 2月  10 00:16 ..</span><br><span class="line">-rw-r--r--   1 root root    18 8月   8 2019 .bash_logout</span><br><span class="line">-rw-r--r--   1 root root   193 8月   8 2019 .bash_profile</span><br><span class="line">-rw-r--r--   1 root root   231 8月   8 2019 .bashrc</span><br><span class="line">[root@centos7 ~]#</span><br></pre></td></tr></table></figure>

<p>/etc/skel目录是用来存放新增的用户的配置文件的目录，当我们创建新用户时，这个目录下的所有文件都会自动被复制到新创建的用户的家目录下，默认情况下，该目录下的所有文件都是隐藏文件。</p>
<p>/etc/default/useradd文件<br>/etc/default/useradd文件在使用useradd命令创建用户时需要调用的一个默认的配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# cat &#x2F;etc&#x2F;default&#x2F;useradd</span><br><span class="line">useradd defaults file</span><br><span class="line">GROUP&#x3D;100                            </span><br><span class="line">HOME&#x3D;&#x2F;home                    #设置用户的家目录在&#x2F;home中</span><br><span class="line">INACTIVE&#x3D;-1                    #是否启用账号过期后禁用，-1表示不启用</span><br><span class="line">EXPIRE&#x3D;                        #账号终止日期，空值表示不启用</span><br><span class="line">SHELL&#x3D;&#x2F;bin&#x2F;bash                #新建的用户的默认使用的shell类型</span><br><span class="line">SKEL&#x3D;&#x2F;etc&#x2F;skel                #新建的用户家目录默认文件存放路径，也就是前文提 到的&#x2F;etc&#x2F;skell目录</span><br><span class="line">CREATE_MAIL_SPOOL&#x3D;yes        #是否创建mail文件</span><br><span class="line">[root@centos7 ~]#</span><br></pre></td></tr></table></figure>

<h2 id="3-用户命令"><a href="#3-用户命令" class="headerlink" title="3.用户命令"></a>3.用户命令</h2><h3 id="创建新用户的命令：-useradd、adduser"><a href="#创建新用户的命令：-useradd、adduser" class="headerlink" title="-创建新用户的命令： useradd、adduser"></a>-创建新用户的命令： useradd、adduser</h3><p>注：adduser是useradd的软连接</p>
<p>useradd [参数选项] 用户名</p>
<h3 id="该命令常用的参数及含义："><a href="#该命令常用的参数及含义：" class="headerlink" title="该命令常用的参数及含义："></a>该命令常用的参数及含义：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d：指定用户家目录</span><br><span class="line">-M：不创建用户的家目录</span><br><span class="line">-g：设置用户初始组的名称或ID，如果没有设置该选项，useradd 会根据&#x2F;etc&#x2F;login.defs 文件中的 USERGROUPS_ENAB 环境变量进行设置。默认 USERGROUPS_ENAB yes 会用和用户名相同的名字创建群组，GID 等于 UID</span><br><span class="line">-G：指定用户要加入的附加组列表，使用，号分隔多个组，不要添加空格。（一个用户只允许有一个主组，可有多个附属组）</span><br><span class="line">-s：创建用户时，指定用户的shell类型，设置成&#x2F;sbin&#x2F;nologin就可以禁止用户登录</span><br><span class="line">-u：指定用户UID</span><br></pre></td></tr></table></figure>

<h3 id="使用userdel删除用户："><a href="#使用userdel删除用户：" class="headerlink" title="使用userdel删除用户："></a>使用userdel删除用户：</h3><p>用法：userdel [参数选项] 用户名<br>选项：-r 删除用户时同时删除用户的家目录和/var/mail下的目录</p>
<h3 id="使用groupadd命令创建新组："><a href="#使用groupadd命令创建新组：" class="headerlink" title="使用groupadd命令创建新组："></a>使用groupadd命令创建新组：</h3><p>用法 ： groupadd [参数选项] 组名</p>
<h4 id="该命令常用的参数及含义：-1"><a href="#该命令常用的参数及含义：-1" class="headerlink" title="该命令常用的参数及含义："></a>该命令常用的参数及含义：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-g： 指定GID，必须是唯一的数值，除非指定-o选项</span><br><span class="line">-r： 建立系统用户组</span><br><span class="line">-f： 新增一个账户，强制覆盖已存在的用户组账户</span><br></pre></td></tr></table></figure>

<h3 id="使用groupdel命令删除组："><a href="#使用groupdel命令删除组：" class="headerlink" title="使用groupdel命令删除组："></a>使用groupdel命令删除组：</h3><p>用法：groupdel 组名<br>（注意：删除的目标组不能是用户的基本组）</p>
<h3 id="使用passwd命令修改密码："><a href="#使用passwd命令修改密码：" class="headerlink" title="使用passwd命令修改密码："></a>使用passwd命令修改密码：</h3><p>用法：passwd [参数选项]</p>
<h4 id="该命令常用的参数及含义：-2"><a href="#该命令常用的参数及含义：-2" class="headerlink" title="该命令常用的参数及含义："></a>该命令常用的参数及含义：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-d：清空密码。仅root能操作</span><br><span class="line">-f： 强制操作，仅root能操作</span><br><span class="line">-l：锁定用户账户，锁定其用户无权更改其密码，仅root能操作</span><br><span class="line">-u：解锁用户账户，仅root能操作</span><br><span class="line">-s：查看用户的状态</span><br></pre></td></tr></table></figure>

<h3 id="使用gpasswd命令管理组："><a href="#使用gpasswd命令管理组：" class="headerlink" title="使用gpasswd命令管理组："></a>使用gpasswd命令管理组：</h3><p>用法：gpasswd</p>
<h4 id="该命令常用的参数及含义：-3"><a href="#该命令常用的参数及含义：-3" class="headerlink" title="该命令常用的参数及含义："></a>该命令常用的参数及含义：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-A:定义组管理员列表 </span><br><span class="line">-a：添加组成员，每次只能加一个 </span><br><span class="line">-d：删除组成员，每次只能删除一个 </span><br><span class="line">-M：定义组成员，可设置多个，用，隔开 </span><br><span class="line">-r：移除组的密码 </span><br><span class="line">-R：将其成员限制访问组</span><br></pre></td></tr></table></figure>

<h3 id="使用usermod命令修改用户信息："><a href="#使用usermod命令修改用户信息：" class="headerlink" title="使用usermod命令修改用户信息："></a>使用usermod命令修改用户信息：</h3><p>用法：usermod [参数选项] 用户名</p>
<h4 id="该命令常用的参数及含义：-4"><a href="#该命令常用的参数及含义：-4" class="headerlink" title="该命令常用的参数及含义："></a>该命令常用的参数及含义：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-u：指定UID</span><br><span class="line"> -d：指定家目录</span><br><span class="line"> -g：指定起始组（只能有一个）</span><br><span class="line"> -G：附加组（可以有多个）</span><br><span class="line"> -s：指定用户登录的shell</span><br><span class="line"> -L：锁定用户账号</span><br><span class="line"> -d：-d一般跟-m一起使用，既指定新的家目录，又移动此前的文件到新的家目录中</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>服务器</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下邮件服务器——Postfix服务器配置与管理</title>
    <url>/2020/04/27/Linux%E4%B8%8B%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E2%80%94%E2%80%94Postfix%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>第一步：我们先检查是否安装Postfix服务器的软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa|grep postfix</span><br></pre></td></tr></table></figure>

<p>第二步：使用yum方式安装Postfix服务器软件</p>
<p>制作yum源文件，创建存储库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir &#x2F;cdrom</span><br></pre></td></tr></table></figure>

<p>挂载光盘</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mount &#x2F;dev&#x2F;cdrom &#x2F;cdrom</span><br><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;yum.repos.d&#x2F;dvd.repo</span><br><span class="line">[dvd]</span><br><span class="line">name&#x3D;dvd</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;cdrom</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabeld&#x3D;1</span><br><span class="line">[root@localhost ~]# yum install Postfix–y  #安装Postfix发邮件软件</span><br><span class="line">[root@ns ~]# yum install dovecot –y  #安装dovecot收邮件软件</span><br></pre></td></tr></table></figure>

<p>第三步:启动postfix,dovecot,named服务，并设置为开机自启.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# service postfix restart  #重启服务</span><br><span class="line">[root@ns ~]# service named restart  #重启服务</span><br><span class="line">[root@ns ~]# service dovecot restart  #重启服务</span><br><span class="line">[root@ns ~]# chkconfig dovecot on   #设置开机自启</span><br><span class="line">[root@ns ~]# chkconfig postfix on     #设置开机自启</span><br></pre></td></tr></table></figure>

<p>第四步：接下来先配置IP参数.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postfix 服务器IP地址：192.168.1.118</span><br><span class="line">postfix 服务器IP地址：192.168.1.118</span><br><span class="line">[root@ns ~]# hostname mail.jcxy.com #修改主机名</span><br><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network #修改配置文件让其主机名永久生效</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002029.png" style="zoom:150%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# vi &#x2F;etc&#x2F;hosts  #加快主机解析，在一下添加</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002038.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ns ~]# vim &#x2F;etc&#x2F;resolv.conf  #在DNS服务器搭建成功后会自动生成以下</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002044.png" alt></p>
<p>创建用户：例 创建三个用户 cmx ,cmx1,cmx2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# useradd cmx  </span><br><span class="line">[root@mail ~]# useradd cmx1</span><br><span class="line">[root@mail ~]# useradd cmx2</span><br><span class="line">[root@mail ~]# passwd cmx</span><br><span class="line">[root@mail ~]# passwd cmx1</span><br><span class="line">[root@mail ~]# passwd cmx2</span><br></pre></td></tr></table></figure>

<p>第五步:配置postfix主配置文件</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527002052.png" style="zoom:150%;">

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002101.png" style="zoom:150%;">

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002110.png" style="zoom:150%;">

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002118.png" style="zoom:150%;">

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002126.png" alt></p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002131.png" alt></p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527002138.png" style="zoom:150%;">

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002148.png" style="zoom:150%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# vim &#x2F;etc&#x2F;aliases  #在以下编辑群发邮件</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002155.png" alt></p>
<p>重启postfix服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# service postfix restart</span><br></pre></td></tr></table></figure>

<p>第六步:配置dovecot的主配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# vim &#x2F;etc&#x2F;dovecot&#x2F;dovecot.conf</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002201.png" style="zoom:150%;">

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002209.png" style="zoom:150%;">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# vim &#x2F;etc&#x2F;dovecot&#x2F;conf.d&#x2F;10-mail.conf  #修改邮箱位置的主配置文件.</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002216.png" alt></p>
<p>重启dovecot服务:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# service dovecot restart</span><br></pre></td></tr></table></figure>

<p>开启防火墙！</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527002224.png" style="zoom:150%;">

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002232.png" alt></p>
<p>测试：</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527002240.png" style="zoom:150%;">

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002247.png" alt></p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002253.png" alt></p>
<p>邮件服务器搭建完毕！</p>
<p>用户磁盘配额管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# vim &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002301.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# init 6  #修改后重启linux系统</span><br><span class="line">[root@mail ~]# quotacheck –augv  </span><br><span class="line">执行quotacheck命令，创建aquota.user文件</span><br><span class="line">-a    &#x2F;&#x2F;扫描&#x2F;etc&#x2F;fstab文件加入quota设置的分区</span><br><span class="line">-g     &#x2F;&#x2F;检查文件系统中文件和目录的数目，并创建aquota.group文件</span><br><span class="line">-u     &#x2F;&#x2F;检查文件系统中文件和目录的数目，并创建aquota.user文件</span><br><span class="line">-v     &#x2F;&#x2F;显示命令的执行过程。</span><br><span class="line">edquota 选项 用户名|组名</span><br><span class="line">主要选项</span><br><span class="line">-g 设置组的磁盘配额</span><br><span class="line">-p 复制某个用户或组的磁盘配额，以设置另一个用户或组的配额</span><br><span class="line">-u设置用户的磁盘配额。缺省时为设置用户的磁盘配额</span><br><span class="line">[root@mail ~]# edquota -u cmx  </span><br><span class="line">空间大小自己定义 以下例：最大空间为20MB 单位：KB</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002307.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# edquota -u cmx1</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002313.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# edquota -u cmx2</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002320.png" alt></p>
<p>启动配额管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mail ~]# quotaoff –aguv  #关闭配额管理</span><br><span class="line">&#x2F;dev&#x2F;sda5 [&#x2F;home]: group quotas turned off</span><br><span class="line">&#x2F;dev&#x2F;sda5 [&#x2F;home]: user quotas turned off</span><br><span class="line">[root@mail ~]# quotaon –aguv  #启动配额管理</span><br><span class="line">&#x2F;dev&#x2F;sda5 [&#x2F;home]: group quotas turned on</span><br><span class="line">&#x2F;dev&#x2F;sda5 [&#x2F;home]: user quotas turned on</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002330.png" style="zoom:150%;">

<p>测试: 给cmx2发送一个大于20MB的附件</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527002339.png" style="zoom:150%;">

<img src="https://gitee.com/laosuye/TC/raw/master/20200527002345.png" style="zoom:150%;">

<p>给cmx2 发送一个小于20MB的附件</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527002352.png" alt></p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527002359.png" style="zoom:150%;">

<p>至此，Postfix服务器及其用户的配额管理已经设置完毕</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>服务器</category>
        <category>Postfix</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Linux</tag>
        <tag>Postfix</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础知识点梳理</title>
    <url>/2020/04/22/Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="python基础知识点梳理"><a href="#python基础知识点梳理" class="headerlink" title="python基础知识点梳理"></a>python基础知识点梳理</h2><p>摘要：<br>本文主要介绍一些平时经常会用到的python基础知识点，用于加深印象，也算是对于学习这门语言的一个总结与回顾。python的详细语法介绍可以查看官方编程手册，也有一些在线网站对python语法进行了比较全面的介绍。</p>
<h3 id="python语言介绍"><a href="#python语言介绍" class="headerlink" title="python语言介绍"></a>python语言介绍</h3><p>python是一门解释型语言，python的设计目标：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一门简单直观的语言并与主要竞争者一样强大</span><br><span class="line">开源，以便任何人都可以为它做贡献</span><br><span class="line">代码像纯英语那样容易理解</span><br><span class="line">适用于短期开发的日常任务</span><br></pre></td></tr></table></figure>

<p>设计哲学是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.优雅</span><br><span class="line">2.明确</span><br><span class="line">3.简单</span><br></pre></td></tr></table></figure>

<h3 id="python基础语法"><a href="#python基础语法" class="headerlink" title="python基础语法"></a>python基础语法</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个字符必须是字母表中字母或下划线 。</span><br><span class="line">标识符的其他的部分由字母、数字和下划线组成。</span><br><span class="line">标识符对大小写敏感。</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235809.png" alt></p>
<h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><p>python与其他语言明显的区别是没有大括号，而是用缩进表示代码块。<br>另外，每行语句不需要以分号结束。</p>
<h4 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h4><p>如果语句很长，可以使用反斜杠()来实现多行语句<br>说明：在 [], {}, 或 () 中的多行语句不需要使用反斜杠</p>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235816.png" alt></p>
<h3 id="判断语法"><a href="#判断语法" class="headerlink" title="判断语法"></a>判断语法</h3><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h4><p>if 和 else用于对条件进行判断并进行处理，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 要判断的条件:</span><br><span class="line">     条件成立时要做的事情</span><br><span class="line">     …</span><br><span class="line"> else:</span><br><span class="line">     条件不成立时要做的事情</span><br></pre></td></tr></table></figure>

<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>对于同时判断多个条件的情况可以用逻辑运算符，有如下三种：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235824.png" alt></p>
<h4 id="elif-语句"><a href="#elif-语句" class="headerlink" title="elif 语句"></a>elif 语句</h4><p>elif语句用于有多个条件进行判断的场景，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 条件1:</span><br><span class="line">    条件1满足时执行的代码</span><br><span class="line">elif 条件2:</span><br><span class="line">    条件2满足时执行的代码</span><br><span class="line">elif 条件3:</span><br><span class="line">    条件3满足时执行的代码</span><br><span class="line">else:</span><br><span class="line">    以上都不满足时执行的代码</span><br></pre></td></tr></table></figure>

<h3 id="循环语法"><a href="#循环语法" class="headerlink" title="循环语法"></a>循环语法</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>循环的作用就是让指定的代码重复执行<br>while循环是python中常见的循环，用于让执行的代码按照指定次数重复执行，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始条件设置，通常是计数器</span><br><span class="line">while 条件(判断计数器是否达到目标次数):</span><br><span class="line">    条件满足时候执行的代码</span><br><span class="line">    …</span><br><span class="line">    处理条件(计数器 + 1)</span><br></pre></td></tr></table></figure>

<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环可以方便地遍历列表，元组，字典等数据类型，比如遍历一个列表的代码片段如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nameList &#x3D; [&quot;zhangsan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;]</span><br><span class="line">for name in nameList:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure>

<p>python中，for循环经常与range函数搭配使用，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in range(1, 10):</span><br><span class="line">     print(i)</span><br></pre></td></tr></table></figure>

<h3 id="python数据类型介绍"><a href="#python数据类型介绍" class="headerlink" title="python数据类型介绍"></a>python数据类型介绍</h3><h4 id="按照是否是数字可以按照如下表格分类："><a href="#按照是否是数字可以按照如下表格分类：" class="headerlink" title="按照是否是数字可以按照如下表格分类："></a>按照是否是数字可以按照如下表格分类：</h4><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235829.png" alt></p>
<p>说明：使用type函数可以返回变量的数据类型</p>
<h4 id="按照是否可变可以分为："><a href="#按照是否可变可以分为：" class="headerlink" title="按照是否可变可以分为："></a>按照是否可变可以分为：</h4><p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235839.png" alt></p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表(list)是python中使用最频繁的数据类型，类似其他语言的数组<br>列表的符号是中括号[]，初始化一个列表语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program_list &#x3D; [&quot;c++&quot;, &quot;java&quot;, &quot;python&quot;, &quot;php&quot;]</span><br></pre></td></tr></table></figure>

<p>列表中常见的几种操作如下：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235847.png" alt></p>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组(tuple)与列表类似，区别是元组的数据不能修改，元组的符号是小括号()，初始化一个元组的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program_tuple &#x3D; (&quot;c++&quot;, &quot;java&quot;, &quot;python&quot;, &quot;php&quot;)</span><br></pre></td></tr></table></figure>

<p>元组主要用于函数的参数和返回值，格式化字符串，以及保护列表数据，由于元组的数据无法修改，因此提供的方法也比较少：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235855.png" alt></p>
<p>元组在python中还可以用于交换两个变量的值:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 10</span><br><span class="line">b &#x3D; 9</span><br><span class="line">a, b &#x3D; (b, a)</span><br></pre></td></tr></table></figure>

<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>字典(dict)通常用于描述一个物体的相关信息，使用键值对存储数据，键必须唯一，由于要使用hash算法，只有不可变类型才能用作键，字典的符号是大括号{}，初始化一个字典的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">human_dic &#x3D; &#123;&quot;name&quot;: &quot;zhangsan&quot;,</span><br><span class="line">             &quot;age&quot;: 26,</span><br><span class="line">             &quot;height&quot;: 1.75,</span><br><span class="line">             &quot;weight&quot;: 66&#125;</span><br></pre></td></tr></table></figure>

<p>字典的常用操作函数如下：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235901.png" alt></p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串(str)的使用也非常广泛，可以使用引号(‘或”)来创建字符串，初始化一个字符串的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">testStr &#x3D; &quot;Wasting time is robbing oneself&quot;</span><br></pre></td></tr></table></figure>

<p>python对于str提供了很多实用的方法，比较常用的有以下这些：</p>
<p>对字符串进行判断的方法：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235908.png" alt></p>
<p>对字符串进行修改(包括格式化，大小写转换)：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235915.png" alt></p>
<p>字符串的查找和替换：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235922.png" alt></p>
<p>字符串的拆分和连接：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235931.png" alt></p>
<h5 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h5><h6 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h6><p>对于列表，元组，字典，字符串，python也提供了一些公共方法，如下：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235936.png" alt></p>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>高级数据类型同样支持以下常见的运算符：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235943.png" alt></p>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>切片使用索引值可以方便地截取容器中一定范围的数据，适用于列表，元组，字符串。<br>切片语法如下：<br>item[N:M:S]<br>其中N表示要截取的开始位置，M表示结束位置，S表示step也就是步长，默认是1，截取的时候[N:M]是个半闭合区间，等效于数学上[N,M)取值范围，取N不取M, N和M都可以省略。python中，-1可以表示最后一个元素，字符串利用切片完成翻转的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; test_str &#x3D; &quot;Hello World&quot; </span><br><span class="line">&gt;&gt;&gt; print(test_str[::-1])</span><br></pre></td></tr></table></figure>

<h3 id="python函数语法"><a href="#python函数语法" class="headerlink" title="python函数语法"></a>python函数语法</h3><p>在python中定义一个函数需要使用def关键字，相比其他语言，返回值不需要声明，定义一个函数的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_hello():</span><br><span class="line">     print(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h4><p>除了常见的必须参数外，python支持缺省参数，即为参数指定一个默认值，可以不传入这个参数，代码例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_human(name, age &#x3D; 23):</span><br><span class="line">     print(&quot;body info: name is %s, age is %s&quot; % (name, age) )</span><br><span class="line"> print_human(&quot;wangwu&quot;)</span><br><span class="line"> print_human(&quot;lisi&quot;, 25)</span><br><span class="line"> print_human(&quot;zhangsan&quot;, age &#x3D; 36)</span><br></pre></td></tr></table></figure>

<h4 id="多值参数"><a href="#多值参数" class="headerlink" title="多值参数"></a>多值参数</h4><p>如果函数处理的参数的个数不确定，就可以用多值参数：</p>
<p>参数名前面增加一个<em>可</em>以接收元组 </p>
<p>参数名前面增加两个可以接收字典</p>
<p>使用了这两个多值参数的代码例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_info(*args, **kwargs):</span><br><span class="line">     print(args)</span><br><span class="line">     print(kwargs)</span><br><span class="line"> program_list &#x3D; [&quot;c++&quot;, &quot;java&quot;, &quot;python&quot;, &quot;php&quot;]</span><br><span class="line"> human_dic &#x3D; &#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: 26, &quot;height&quot;: 1.75, &quot;weight&quot;: 66&#125;</span><br><span class="line"> print_info(*program_list, **human_dic)</span><br></pre></td></tr></table></figure>

<h6 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h6><p>python中可以利用元组返回多个值，多个返回值的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def measure_rect():</span><br><span class="line">     width &#x3D; 12</span><br><span class="line">     height &#x3D; 6</span><br><span class="line">     return width, height</span><br><span class="line"> w, h &#x3D; measure_rect()</span><br><span class="line"> print(&quot;width is %d, height is %d&quot; % (w, h))</span><br></pre></td></tr></table></figure>

<h3 id="python常用函数"><a href="#python常用函数" class="headerlink" title="python常用函数"></a>python常用函数</h3><h4 id="print输出函数"><a href="#print输出函数" class="headerlink" title="print输出函数"></a>print输出函数</h4><p>python使用print函数将信息输出到控制台，输出数据时经常会用到格式化操作符，不同的格式化字符串含义如下表：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200526235949.png" alt></p>
<p>语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;格式化字符串&quot; % 变量1)</span><br><span class="line">print(&quot;格式化字符串&quot; % (变量1, 变量2…))</span><br></pre></td></tr></table></figure>

<p>print函数默认会自动在内容末尾增加换行，如果不希望换行，可以用end参数指定需要输出的内容<br>语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;Hello word!&quot;, end&#x3D;&quot;&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="input输入函数"><a href="#input输入函数" class="headerlink" title="input输入函数"></a>input输入函数</h4><p>使用input函数从键盘等待用户的输入，默认都是一个字符串<br>语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符串变量 &#x3D; input(&quot;提示信息：&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h4><p>常见的类型转换函数如下：</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527000004.png" alt></p>
<p>参考文献:原文链接：<a href="https://blog.csdn.net/m0_46245938/article/details/104160793" target="_blank" rel="noopener">https://blog.csdn.net/m0_46245938/article/details/104160793</a></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>编程基础</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架之Mybatis框架的学习笔记</title>
    <url>/2024/06/20/SSM%E6%A1%86%E6%9E%B6%E4%B9%8BMybatis%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>1、什么是三层架构？</p>
<ul>
<li>在项目开发中，遵循的一种形式模式，分为三层<ul>
<li>界面层：用啦接受客户端的输入，调用业务逻辑层进行功能处理，返回结果给客户端，过去的servlet就是界面层的功能</li>
<li>业务逻辑层：用来进行整个项目的业务逻辑处理，向上为界面层提供处理结果，向下问数据访问层要数据</li>
<li>数据访问层：专门用来进行数据库的增删查改操作，向上为业务逻辑层提供数据</li>
</ul>
</li>
<li>各层之间的调用顺序是固定的，不允许跨层访问<ul>
<li>界面层&lt;—-&gt;业务逻辑层&lt;—–&gt;数据访问层</li>
</ul>
</li>
</ul>
<h2 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h2><p>常用的况框架SSM</p>
<ul>
<li>Spring：它是整合其他框架的框架，它的核心是IOC和AOP，它由20多个模块构成的，在很多领域都提供了很好的解决方案，是一个很强大的存在</li>
<li>SpriingMVC：他是Spring家族的医院，专门用来优化控制器(Servlet)的，提供了极其简单数据提交，数据携带，页面跳转等功能</li>
<li>MyBatis：是持久化层的一个框架，用来进行数据库的访问哟话，专注于SQL语句，极大的简化了JDBC的访问</li>
</ul>
<p>什么是框架？</p>
<ul>
<li>它是一个半成品软件，将所有的公共的，重复的功能解决掉，帮助程序员快速高效的进行开发，他是可复用的，可扩展的</li>
</ul>
<h2 id="什么是MyBatis框架"><a href="#什么是MyBatis框架" class="headerlink" title="什么是MyBatis框架"></a>什么是MyBatis框架</h2><ul>
<li>是Apache的一个开源项目iBatis</li>
<li>MyBaits最主要用来完成数据访问层的优化，它专注于sql语句，简化了过去JDBC繁琐的访问机制</li>
<li>添加框架的步骤<ul>
<li>添加依赖</li>
<li>添加配置</li>
<li>创建ssm数据库，添加student表，并且插入数据</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database ssm default charset utf8;</span><br><span class="line">use ssm;</span><br><span class="line">create table student(</span><br><span class="line">id int(11) AUTO_INCREMENT primary key,</span><br><span class="line">name varchar(255) default null,</span><br><span class="line">email varchar(255) default null,</span><br><span class="line">age int(11) default null</span><br><span class="line">) ENGINE&#x3D;InnoDB default charset&#x3D;utf8;</span><br><span class="line">insert into student(name,email,age) values(&quot;张三&quot;,&#39;zhangsan@126.com&#39;,22);</span><br><span class="line">insert into student(name,email,age) values(&quot;李四&quot;,&#39;lisi@126.com&#39;,21);</span><br><span class="line">insert into student(name,email,age) values(&quot;王五&quot;,&#39;wangwu@126.com&#39;,22);</span><br><span class="line">insert into student(name,email,age) values(&quot;赵六&quot;,&#39;zhaoliu@126.com&#39;,24);</span><br><span class="line">select * from student;</span><br></pre></td></tr></table></figure>

<p>配置SqlMapConfig.xml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--读取属性文件，jdbc.properties</span><br><span class="line">    属性：resource：从resource目录下找执行名称的文件加载</span><br><span class="line">    url:使用绝对路径加载属性文件</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;properties resource&#x3D;&quot;jdbc.properties&quot;&gt;&lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;!--配置数据库环境变量(数据库连接配置)--&gt;</span><br><span class="line">    &lt;!--environments里面可以配置多套environment</span><br><span class="line">        default：使用下面的environment标签的id属性进行执行配置</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">        &lt;!--id：就是提供给environment的default属性是有--&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">            &lt;!--配置事务管理器</span><br><span class="line">                type属性：指定事务管理的方式   </span><br><span class="line">                    JDBC:事务的控制交托给程序员处理</span><br><span class="line">                    MANAGED：由容器(Spring)来管理事务</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;&lt;&#x2F;transactionManager&gt;</span><br><span class="line">            &lt;!--配置数据源</span><br><span class="line">                type：指定不同的配置方式</span><br><span class="line">                    JNDI：Java命名目录接口，在服务器端进行数据库连接池的管理</span><br><span class="line">                    POOLED：使用数据库连接池进行数据库的连接配置</span><br><span class="line">                    UNPOLLED：不使用数据库连接池</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;!--配置数据库连接的基本参数--&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;jdbc.driverClassName&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line">    &lt;!--注册mapper.xml文件</span><br><span class="line">        resource:从resource目录下找指定名称文件注册</span><br><span class="line">        url：使用绝对路径找文件注册</span><br><span class="line">        class：动态代理方式下的注册</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;StudentMapper.xml&quot;&gt;&lt;&#x2F;mapper&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure>

<p>配置StudentMapper.xml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">mapper:是整个文件的大标签，用来开始和结束xml</span><br><span class="line">属性：</span><br><span class="line">    namespace：指定命名空间(相当于包名)，用来区分不同mapper.xml文件中相同的id属性</span><br><span class="line">--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;su&quot;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    完成查询全部学生的功能</span><br><span class="line">    resultType:指定查询返回结果集的类型，如果是集合，则必须是泛型的类型</span><br><span class="line">    parameterType：如果有参数，则通过它来指定参数类型</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getAll&quot; resultType&#x3D;&quot;com.bjpowernode.pojo.Student&quot;&gt;</span><br><span class="line">        select id,name,email,age</span><br><span class="line">        from student</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用文件流的读取核心配置文件SqlMapConfig</span><br><span class="line">InputStream in &#x3D; Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">&#x2F;&#x2F;创建SqlSessionFactory工厂</span><br><span class="line">SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(in);</span><br><span class="line">&#x2F;&#x2F;取出SqlSession的对象</span><br><span class="line">SqlSession sqlSession &#x3D; factory.openSession();</span><br><span class="line">&#x2F;&#x2F;完成查询操作</span><br><span class="line">List&lt;Student&gt; list &#x3D; sqlSession.selectList(&quot;su.getAll&quot;);</span><br><span class="line">list.forEach(student -&gt; System.out.println(student));</span><br><span class="line">&#x2F;&#x2F;关闭SqlSession</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>

<p>使用mybatis进行增删查改</p>
<p>SqlMapConfig配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--按主键id查询学生信息--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;com.bjpowernode.pojo.Student&quot;&gt;</span><br><span class="line">    select id,name,email,age from student where id&#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--按学生名称模糊查询--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getByName&quot; parameterType&#x3D;&quot;string&quot; resultType&#x3D;&quot;com.bjpowernode.pojo.Student&quot;&gt;</span><br><span class="line">    select id,name,email,age from student where name  like &#39;%$&#123;name&#125;%&#39;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--增加学生--&gt;</span><br><span class="line">&lt;insert id&#x3D;&quot;insert&quot; parameterType&#x3D;&quot;com.bjpowernode.pojo.Student&quot;&gt;</span><br><span class="line">    insert into student(name,email,age) values (#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--按主键删除学生--&gt;</span><br><span class="line">&lt;delete id&#x3D;&quot;delete&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">    delete from student where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;delete&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--修改学生--&gt;</span><br><span class="line">&lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;com.bjpowernode.pojo.Student&quot;&gt;</span><br><span class="line">    update student set name&#x3D;#&#123;name&#125;,email&#x3D;#&#123;email&#125;,age&#x3D;#&#123;age&#125; where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

<p>测试程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;读取核心配置文件</span><br><span class="line">InputStream in &#x3D; Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">&#x2F;&#x2F;创建SqlSessionFactory工厂对象</span><br><span class="line">SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(in);</span><br><span class="line">&#x2F;&#x2F;取出SqlSession</span><br><span class="line">SqlSession sqlSession &#x3D; factory.openSession();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;完成查询操作</span><br><span class="line">        List&lt;Student&gt; list &#x3D; sqlSession.selectList(&quot;su.getAll&quot;);</span><br><span class="line">        list.forEach(student -&gt; System.out.println(student));</span><br><span class="line">        &#x2F;*for (Student x : list)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">        sqlSession.close();</span><br><span class="line"> &#x2F;&#x2F;按主键查询学生</span><br><span class="line">        Student stu &#x3D; sqlSession.selectOne(&quot;su.getById&quot;,1);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">        &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">        sqlSession.close();</span><br><span class="line">&#x2F;&#x2F;执行模糊查询</span><br><span class="line">        List&lt;Student&gt; list &#x3D; sqlSession.selectList(&quot;su.getByName&quot;,&quot;李&quot;);</span><br><span class="line">        for (Student x : list)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;list.forEach(student -&gt; System.out.println(student));</span><br><span class="line">        &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">        sqlSession.close();</span><br><span class="line">&#x2F;&#x2F;增加学生</span><br><span class="line">        int num &#x3D; sqlSession.insert(&quot;su.insert&quot;, new Student(&quot;苏叶&quot;, &quot;210469@qq.com&quot;, 21));</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">&#x2F;&#x2F;删除学生</span><br><span class="line">        int delete &#x3D; sqlSession.delete(&quot;su.delete&quot;, 5);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">&#x2F;&#x2F;修改学生</span><br><span class="line">        int update &#x3D; sqlSession.update(&quot;su.update&quot;, new Student(2, &quot;王麻子&quot;, &quot;wm@126.com&quot;, 18));</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br></pre></td></tr></table></figure>

<p><strong>注意：执行增删改语句一定要提交事务</strong></p>
<h2 id="Mybatis对象分析"><a href="#Mybatis对象分析" class="headerlink" title="Mybatis对象分析"></a>Mybatis对象分析</h2><h3 id="1、Resources类"><a href="#1、Resources类" class="headerlink" title="1、Resources类"></a>1、Resources类</h3><ul>
<li>就是解析SqlMapConfig.xml文件，创建出相应的对象</li>
<li>InputStream in = Resources.getResourceAsStream(“SqlMapConfig.xml”);</li>
</ul>
<h3 id="2、SqlSessionFactoryBuilder接口"><a href="#2、SqlSessionFactoryBuilder接口" class="headerlink" title="2、SqlSessionFactoryBuilder接口"></a>2、SqlSessionFactoryBuilder接口</h3><ul>
<li>使用ctrl+h查看本接口的子接口及实现类</li>
<li>DefaultSqlSessionFactory是实现类</li>
<li>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);</li>
</ul>
<p>3、SqlSession接口</p>
<ul>
<li>DefaultSqlSession实现类</li>
<li>SqlSession sqlSession = factory.openSession();</li>
</ul>
<h2 id="为实体类注册别名"><a href="#为实体类注册别名" class="headerlink" title="为实体类注册别名"></a>为实体类注册别名</h2><h3 id="1、单个注册"><a href="#1、单个注册" class="headerlink" title="1、单个注册"></a>1、单个注册</h3><p>在SqlMapConfig.xml文件中properties 标签后 environments 前面加入标签，注册之后就可以在Mapper.xml文件中的resultType属性或者parameterType属性中使用这个别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--注册实体类的别名--&gt;</span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;!--单个注册--&gt;</span><br><span class="line">    &lt;typeAlias type&#x3D;&quot;com.bjpowernode.pojo.Student&quot; alias&#x3D;&quot;student&quot;&gt;&lt;&#x2F;typeAlias&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、批量注册"><a href="#2、批量注册" class="headerlink" title="2、批量注册"></a>2、批量注册</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--批量注册别名</span><br><span class="line">别名是类名的驼峰命名规范</span><br><span class="line">--&gt;</span><br><span class="line">&lt;package name&#x3D;&quot;com.bjpowernode.pojo&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>批量把这个目录下的所有实体类都注册别名，别名是类名的驼峰命名规范</p>
<p>输出日志：<strong>固定的写法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--设置日志输出底层执行的代码--&gt;</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;STDOUT_LOGGING&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="1、动态代理存在的意义"><a href="#1、动态代理存在的意义" class="headerlink" title="1、动态代理存在的意义"></a>1、动态代理存在的意义</h3><ul>
<li>在三层架构中，业务逻辑层需要通过接口访问数据访问层的功能，可以使用动态代理</li>
</ul>
<h3 id="2、动态代理的实现规范"><a href="#2、动态代理的实现规范" class="headerlink" title="2、动态代理的实现规范"></a>2、动态代理的实现规范</h3><ul>
<li>UserMapper.xml文件与UserMapper.java的接口必须在同一个目录。</li>
<li>UserMapper.xml文件与UserMapper.java接口的文件名必须一致，后缀可以不管</li>
<li>UserMapper.xml文件中的标签id的值与UserMapper.java的接口中方法名称完全一致</li>
<li>UserMapper.xml文件中的标签的parameterType属性值与UserMapper.java的接口中方法参数类型完全一致</li>
<li>UserMapper.xml文件中标签的resultType值与UserMapper.java的接口方法的返回值类型必须一致</li>
<li>UserMapper.xml文件中标签的namespace属性必须是接口的完全限定名称，例如com.bjpowernode.mapper.UserMapper</li>
<li>在SqlMapConfig.xml文件中注册mapper文件时，使用class=接口的完全限定名称，例如com.bjpowernode.mapper.UserMapper</li>
</ul>
<h3 id="3、动态代理的访问"><a href="#3、动态代理的访问" class="headerlink" title="3、动态代理的访问"></a>3、动态代理的访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InputStream in &#x3D; Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);</span><br><span class="line">      SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(in);</span><br><span class="line">      sqlSession &#x3D; factory.openSession();</span><br><span class="line">      uMapper &#x3D; sqlSession.getMapper(UsersMapper.class);</span><br><span class="line">	&#x2F;&#x2F;直接调用方法</span><br><span class="line">      List&lt;Users&gt; list &#x3D; uMapper.getAll();</span><br><span class="line">      for(Users x : list)&#123;</span><br><span class="line">         System.out.println(x);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;原来的方式</span><br><span class="line">   public void testGetAll() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;完成查询操作</span><br><span class="line">       &#x2F;&#x2F;只能通过namespace标注下id的值来调用方法，而且不同的语句使用不同的sqlsession方法</span><br><span class="line">        List&lt;Student&gt; list &#x3D; sqlSession.selectList(&quot;su.getAll&quot;);</span><br><span class="line">        list.forEach(student -&gt; System.out.println(student));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>使用动态代理的方式进行获取数据</p>
<h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a>#{}和${}的区别</h2><p><strong>#{}占位符</strong></p>
<ul>
<li>传参的时候大部分使用#{}传参，它的底层使用的是PreparedStatement对象，是安全的数据库访问，防止sql注入</li>
<li>#{}里面写什么东西，主要看parameterType参数的类型<ul>
<li>如果parameterType的类型是简单类型(8种基本(封装)+String)，则#{}里面随便写</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getById&quot; resultType&#x3D;&quot;users&quot; parameterType&#x3D;&quot;int&quot;&gt; &gt;入参类型是简单类型</span><br><span class="line">       select id,username,birthday,sex,address from users where id &#x3D; #&#123;id&#125; &gt;这个里面可以随便写</span><br><span class="line">   &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>parameterType的类型如果是实体类型，则#{}里面只能是类中的成员变量的名称，并且区分大小写</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;add&quot; parameterType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">        insert into users(username,birthday,sex,address) values(#&#123;userName&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>

<p><strong>${}字符串拼接或字符串替换</strong></p>
<ul>
<li>字符串拼接，一般用于模糊查询中，建议少用，因为有sql注入的风险</li>
<li>也分为两种情况，同样看parameterType类型<ul>
<li>如果parameterType类型是简单类型，则${}里面随便写，但是分版本，如果是3.5.1及以下版本，只能写value</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getByLike&quot; parameterType&#x3D;&quot;string&quot; resultType&#x3D;&quot;users&quot;&gt;  &gt;传参是简单类型</span><br><span class="line">        select id,username,birthday,sex,address from users </span><br><span class="line">    	where username like &#39;%$&#123;userName&#125;%&#39;	&gt;$&#123;&#125;里面可以随便写</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>parameterType的类型如果是实体类型，则${}里面只能是类中的成员变量的名称（溴铵在已经很少用了）</li>
</ul>
<p>优化模糊查询，因为直接使用${}这个进行拼接会有sql注入危险，所以以后我们使用concat()函数来进行模糊查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getByNameGood&quot; parameterType&#x3D;&quot;string&quot; resultType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">        select id,username,birthday,sex,address from users where username like concat(&#39;%&#39;,#&#123;name&#125;,&#39;%&#39;)</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>字符串替换使用${}</p>
<p>在有的时候我们需要进行模糊查询的时候，不仅仅是根据用户名，有的时候根据地址进行模糊查询，这个时候我们肯定是不能写两个不同的sql语句，这样太麻烦了，所以这个时候我们就要需要用到注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Users&gt; getByNameOrAddress(</span><br><span class="line">            @Param(&quot;columnName&quot;) String columnName,</span><br><span class="line">            @Param(&quot;columnValue&quot;) String columnValue); </span><br><span class="line">&lt;!----&gt;    </span><br><span class="line">    &lt;!--如果参数超过一个则parameterType不用写--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getByNameOrAddress&quot; resultType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">        select id,username,birthday,sex,address from users where</span><br><span class="line">        $&#123;columnName&#125; like concat(&#39;%&#39;,#&#123;columnValue&#125;,&#39;%&#39;)</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>然后进行测试，要查询哪个字段，就靠自己传参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public  void  testGetByNameGoodOrAddress()&#123;</span><br><span class="line">      List&lt;Users&gt; list &#x3D; uMapper.getByNameOrAddress(&quot;address&quot;,&quot;南&quot;);</span><br><span class="line">      for (Users x:list)&#123;</span><br><span class="line">         System.out.println(x);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="返回主键业务"><a href="#返回主键业务" class="headerlink" title="返回主键业务"></a>返回主键业务</h2><p>假如在有的时候，我们插入一行数据，但是主键是自增的，并且关联了其他表，且也要为其增加数据，这样我们还要先查询自增的主键是多少再进行增加另一个表的数据，这样很麻烦，所以我们可以在插入数据的时候返回主键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;add&quot; parameterType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">   &lt;selectKey keyProperty&#x3D;&quot;id&quot; resultType&#x3D;&quot;int&quot; order&#x3D;&quot;AFTER&quot;&gt;</span><br><span class="line">       select last_insert_id()</span><br><span class="line">   &lt;&#x2F;selectKey&gt;</span><br><span class="line">       insert into users(username,birthday,sex,address) values(#&#123;userName&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">   &lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>selectKey标签的详解：<ul>
<li>keyProperty：users对象的哪个属性来返回主键值</li>
<li>resultType：返回主键的类型</li>
<li>order：在插入语句前还是后返回主键的值</li>
</ul>
</li>
</ul>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><ul>
<li>什么是动态sql<ul>
<li>可以定义代码片段，可以进行逻辑判断，可以进行循环处理(批量处理)，使条件判断更简单</li>
</ul>
</li>
<li>：用来定义代码片段，可以将所有的列名，或者复杂的条件定义为代码片段，供使用时调用</li>
<li>：用来引用标签定义的代码片段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;!--定义代码片段--&gt;</span><br><span class="line">  &lt;sql id&#x3D;&quot;allColumns&quot;&gt;</span><br><span class="line">      id,username,birthday,sex,address</span><br><span class="line">  &lt;&#x2F;sql&gt;</span><br><span class="line">&lt;!--在sql语句中引用--&gt;</span><br><span class="line">  &lt;select id&#x3D;&quot;getAll&quot; resultType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">      select &lt;include refid&#x3D;&quot;allColumns&quot;&gt;&lt;&#x2F;include&gt; from users</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>进行条件判断</li>
<li>进行多条件拼接，在查询，删除，更新中使用<ul>
<li>强化select查询，使用if进行判断</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getByCondition&quot; parameterType&#x3D;&quot;users&quot; resultType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">    select &lt;include refid&#x3D;&quot;allColumns&quot;&gt;&lt;&#x2F;include&gt; from users</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;userName !&#x3D; null and userName !&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">            and username like concat(&#39;%&#39;,#&#123;userName&#125;,&#39;%&#39;)</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;birthday !&#x3D; null&quot;&gt;</span><br><span class="line">            and birthday &#x3D; #&#123;birthday&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;sex !&#x3D; null and sex !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">            and sex &#x3D; #&#123;sex&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;address !&#x3D; null and address !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">            and address like concat(&#39;%&#39;,#&#123;address&#125;,&#39;%&#39;)</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testGetByCondition()&#123;</span><br><span class="line">   Users users &#x3D; new Users();</span><br><span class="line">   users.setUserName(&quot;小&quot;);</span><br><span class="line">   List&lt;Users&gt; list &#x3D; uMapper.getByCondition(users);</span><br><span class="line">   for (Users x : list)&#123;</span><br><span class="line">      System.out.println(x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>:有选择的进行更新处理，至少更新一列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;updateBySet&quot; parameterType&#x3D;&quot;users&quot; &gt;</span><br><span class="line">    update users</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;userName !&#x3D; null and userName !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">            username &#x3D; #&#123;userName&#125;,</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;birthday !&#x3D; null&quot;&gt;</span><br><span class="line">            birthday &#x3D; #&#123;birthday&#125;,</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;sex !&#x3D; null and sex !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">            sex &#x3D; #&#123;sex&#125;,</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;address !&#x3D; null and address !&#x3D; &#39;&#39;&quot;&gt;</span><br><span class="line">            address &#x3D; #&#123;address&#125;,</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;set&gt;</span><br><span class="line">        where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testUpdateBySet()&#123;</span><br><span class="line">   Users users &#x3D; new Users();</span><br><span class="line">   users.setId(6);</span><br><span class="line">   users.setUserName(&quot;TheShy&quot;);</span><br><span class="line">   int i &#x3D; uMapper.updateBySet(users);</span><br><span class="line">   sqlSession.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>:用来进行循环遍历，完成循环条件查询，批量删除，批量增减，批量更新</p>
<ul>
<li>collection：用来指定入参的类型，如果是List集合则为小写的list，Map为map，数组Array是array</li>
<li>item：每次循环遍历出来的值或者对象</li>
<li>separator：多个值或者多个对象之间的分隔符</li>
<li>open：整个循环前的前括号</li>
<li>close：整个循环的后括号</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getByIds&quot; resultType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">    select &lt;include refid&#x3D;&quot;allColumns&quot;&gt;&lt;&#x2F;include&gt;</span><br><span class="line">    from users</span><br><span class="line">    where id in (</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;array&quot; item&#x3D;&quot;id&quot; separator&#x3D;&quot;,&quot; open&#x3D;&quot;(&quot; close&#x3D;&quot;)&quot;&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">     )</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>使用foreach实现批量删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;delete id&#x3D;&quot;deleteBatch&quot;&gt;</span><br><span class="line">    delete from users</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;array&quot; item&#x3D;&quot;id&quot; separator&#x3D;&quot;,&quot; open&#x3D;&quot;(&quot; close&#x3D;&quot;)&quot;&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;delete&gt;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testDeleteBatch()&#123;</span><br><span class="line">   Integer[] array &#x3D; &#123;4,7&#125;;</span><br><span class="line">   int i &#x3D; uMapper.deleteBatch(array);</span><br><span class="line">   sqlSession.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果要使用批量更新，需要再properties配置文件中的url后加上 &amp;allowMultiQueries=true</strong></p>
<h3 id="指定参数位置"><a href="#指定参数位置" class="headerlink" title="指定参数位置"></a>指定参数位置</h3><p>如果入参是多个，可以通过指定参数位置进行传参，是实体类包含不住的条件,实体类只能封装住成员变量的条件，如果某个成员变量需要有区间范围之内的判断，或者两个值进行处理，则实体类包不住</p>
<ul>
<li>例如：查询指定日期范围内的用户信息</li>
<li>首先定义接口中的方法，因为是在一个区间之内，所以需要两个参数的方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Users&gt; getByBirthday(Date beigin,Date end);</span><br></pre></td></tr></table></figure>

<ul>
<li>然后在Mapper.xml文件中编写sql语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getByBirthday&quot; resultType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">    select &lt;include refid&#x3D;&quot;allColumns&quot;&gt;&lt;&#x2F;include&gt;</span><br><span class="line">    from users</span><br><span class="line">    where birthday between #&#123;arg0&#125; and #&#123;arg1&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>在进行多个参数查询的时候，我们可以用 arg0 开始指定，从零开始，依次递增</p>
<ul>
<li>测试</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testGetByBirthday() throws ParseException &#123;</span><br><span class="line">   Date begin &#x3D; sf.parse(&quot;2001-01-1&quot;);</span><br><span class="line">   Date end &#x3D; sf.parse(&quot;2003-01-1&quot;);</span><br><span class="line">   List&lt;Users&gt; byBirthday &#x3D; uMapper.getByBirthday(begin, end);</span><br><span class="line">   for (Users x : byBirthday)&#123;</span><br><span class="line">      System.out.println(x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="入参为Map"><a href="#入参为Map" class="headerlink" title="入参为Map"></a>入参为Map</h3><ul>
<li>如果入参超过一个以上，使用map封装查询条件，更有语义，查询条件更明确</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Users&gt; getByMap(Map map);</span><br><span class="line">&lt;!--</span><br><span class="line">#&#123;birthdayBegin&#125;  为map集合的key</span><br><span class="line">#&#123;birthdayEnd&#125;     为map集合的value</span><br><span class="line">--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getByMap&quot; resultType&#x3D;&quot;users&quot;&gt;</span><br><span class="line">    select &lt;include refid&#x3D;&quot;allColumns&quot;&gt;&lt;&#x2F;include&gt;</span><br><span class="line">    from users</span><br><span class="line">    where birthday between #&#123;birthdayBegin&#125; and #&#123;birthdayEnd&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">@Test</span><br><span class="line">public void testGetByMap() throws ParseException &#123;</span><br><span class="line">   Date begin &#x3D; sf.parse(&quot;2001-01-1&quot;);</span><br><span class="line">   Date end &#x3D; sf.parse(&quot;2003-01-1&quot;);</span><br><span class="line">   Map map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">   map.put(&quot;birthdayBegin&quot;,begin);</span><br><span class="line">   map.put(&quot;birthdayEnd&quot;,end);</span><br><span class="line">   List&lt;Users&gt; byBirthday &#x3D; uMapper.getByMap(map);</span><br><span class="line">   for (Users x : byBirthday)&#123;</span><br><span class="line">      System.out.println(x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="返回值是map"><a href="#返回值是map" class="headerlink" title="返回值是map"></a>返回值是map</h3><ul>
<li>如果返回的数据实体类无法包含，可以使用map返回多张表中若干的数据，然后后这些数据之间没有任何关系，就是Object类型，map的key就是列名或者别名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;返回值是map(一行)</span><br><span class="line">Map getReturnMap(Integer id);</span><br><span class="line">&#x2F;&#x2F;返回值为多行map</span><br><span class="line">List&lt;Map&gt; getAllMap();</span><br><span class="line">&lt;!--返回值为一行map--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getReturnMap&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;map&quot;&gt;</span><br><span class="line">    select username,address from users</span><br><span class="line">    where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;!--返回值为多行map--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getAllMap&quot; resultType&#x3D;&quot;map&quot;&gt;</span><br><span class="line">    select username,address from users</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&#x2F;&#x2F;返回值为一行map</span><br><span class="line">@Test</span><br><span class="line">public void testGetReturnMap()&#123;</span><br><span class="line">   Map returnMap &#x3D; uMapper.getReturnMap(2);</span><br><span class="line">   System.out.println(returnMap.get(&quot;username&quot;));</span><br><span class="line">   System.out.println(returnMap.get(&quot;address&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;返回多行Map</span><br><span class="line">@Test</span><br><span class="line">public void testGetAllMap()&#123;</span><br><span class="line">   List&lt;Map&gt; allMap &#x3D; uMapper.getAllMap();</span><br><span class="line">   for (Map x : allMap)&#123;</span><br><span class="line">      System.out.println(x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="resultMap的用法"><a href="#resultMap的用法" class="headerlink" title="resultMap的用法"></a>resultMap的用法</h2><ul>
<li>在有的时候实体类的属性和数据库表的字段不一样的情况下，可以使用resultMap进行关系映射</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;!--实体类和表中的字段不一样的情况下，可以使用resultMap手工完成映射--&gt;</span><br><span class="line">  &lt;resultMap id&#x3D;&quot;bookmap&quot; type&#x3D;&quot;book&quot;&gt;</span><br><span class="line">      &lt;!--</span><br><span class="line">id是你在sql语句中设置的id type是你映射的类型</span><br><span class="line">--&gt;</span><br><span class="line">      &lt;!--主键绑定--&gt;</span><br><span class="line">      &lt;!--property为你实体类中的属性，column为你数据库中对应的字段名--&gt;</span><br><span class="line">      &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;bookid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;!--非主键绑定--&gt;</span><br><span class="line">      &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;bookname&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">  &lt;&#x2F;resultMap&gt;</span><br><span class="line">  &lt;select id&#x3D;&quot;getAllBook&quot; resultMap&#x3D;&quot;bookmap&quot;&gt; &lt;!--设置返回值为resultMap，并且设置名字，为你resultMap中的id--&gt;</span><br><span class="line">      select bookid,bookname from book</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表的关联关系"><a href="#表的关联关系" class="headerlink" title="表的关联关系"></a>表的关联关系</h2><p>关联关系是有方向的</p>
<ul>
<li>一对多关联：一个老师可以教多个学生，多个学生只有一个老师来教，站在老师方向，就是一对多关联</li>
<li>多对一关联：一个老师可以教多个学生，多个学生只有一个老师来教，站在学生的方向，这就是多对一的关系</li>
<li>一对一关联：一个老师辅导一个学生，一个学生只请教一个老师，学生和老师一对一</li>
<li>多对多关联：园区划线的车位和园区的任意一辆车，一个车位可以停任意一辆车，任意一辆车可以停在任意的一个车位。</li>
<li><strong>一对多的关联管理</strong><ul>
<li>客户和订单就是典型的一对多关联关系，一个客户名下可以有多个订单，客户表是一方，订单表是多方</li>
</ul>
</li>
<li>使用一对多的关联关系，可以按组查询客户的同时查询该客名下所有的订单<ul>
<li>把两个表创建实体类，客户表可以创建一个订单类型的属性</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;客户表</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private List&lt;Orders&gt; ordersList;</span><br><span class="line">&#x2F;&#x2F;订单orders表</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String orderNumber;</span><br><span class="line">    private Double orderPrice;</span><br></pre></td></tr></table></figure>

<p>因为返回的数据不仅仅有客户表中的信息，还有订单表中的信息，所以数据库要多表连接查询，查询的数据的不同，所以要使用resultMap进行一个绑定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id&#x3D;&quot;customermap&quot; type&#x3D;&quot;customer&quot;&gt;</span><br><span class="line">    &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;cid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;result property&#x3D;&quot;name&quot; column&#x3D;&quot;name&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;result property&#x3D;&quot;age&quot; column&#x3D;&quot;age&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;!--orders属性绑定--&gt;</span><br><span class="line">    &lt;collection property&#x3D;&quot;ordersList&quot; ofType&#x3D;&quot;orders&quot;&gt;</span><br><span class="line">        &lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;oid&quot;&gt;&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;orderNumber&quot; column&#x3D;&quot;orderNumber&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;orderPrice&quot; column&#x3D;&quot;orderPrice&quot;&gt;&lt;&#x2F;result&gt;</span><br><span class="line">    &lt;&#x2F;collection&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;getById&quot; parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;customermap&quot;&gt;</span><br><span class="line">    select c.id cid,name,age,o.id oid,orderNumber,orderPrice,customer_id</span><br><span class="line">    from customer c left join orders o on c.id &#x3D; o.customer_id</span><br><span class="line">    where c.id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>多对一关联关系：订单和客户就是多对一关联，站在订单的方向查询同时将客户信息查询出来这就是多对一查询，同理可以在订单的实体类中设置用户customer为属性，然后创建订单的接口和其Mapper.xml文件</p>
<p>总结：无论什么关联关系，如果某一方持有另一方的集合，则使用标签完成映射，如果某方持有另一方对象，则使用标签完成映射</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>多个操作同时完成，或者同时失败成为事务处理</p>
<ul>
<li>事务有四个特性：一致性，持久性，原子性，隔离性</li>
<li>在mybatis中是设置事务,设置为程序员自己处理的提交和回滚</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;&lt;&#x2F;transactionManager&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>也就可以设置为自动提交</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlSession &#x3D; factory.openSession(); &#x2F;&#x2F;默认是手工提交事务，设置为false也是手动提交事务，设置为true为自动提交事务</span><br><span class="line">sqlSession &#x3D; factory.openSession(true);&#x2F;&#x2F;设置为自动提交，在增删改后面不需要commit()</span><br></pre></td></tr></table></figure>

<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li>mybatis框架提供了两级缓存，一级缓存和二级缓存，默认开启一级缓存</li>
<li>缓存就是为了提高查询效率，如果数据库中发生改变，那么将会清空缓存</li>
<li>使用缓存后查询的流程：</li>
<li>查询时先到缓存里面查，如果没有则去数据库查询，放在缓存一份，然后返回给客户端，下次再查询的时候，不再访问数据库，直接在缓存里面拿。如果数据库发生了commit()操作，那么将会清空缓存。</li>
<li>一级缓存，使用的是sqlSession的作用域，同一个sqlSession共享一级缓存的数据</li>
<li>二级缓存使用的是mapper的作用域，不同的sqlSession只要访问的是同一个mapper.xml文件，则共享二级缓存作用域</li>
</ul>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><ul>
<li>ORM(Object Relational Mapping):对象映射关系</li>
<li>mybatis框架是ORM非常优秀的框架</li>
<li>Java语言中以对象的方式操作数据，存到数据库中是以表的方式进行存储，对象中的成员变量与表中的列之间的数据互换成为映射，整个这套操作就是ORM</li>
<li>持久化的操作：将对象保存到关系型数据库中，将关系型数据库中的数据读出来以对象的形式封装</li>
<li>mybatis是持久化层优秀的框架</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring - SSM - Mybatis</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Java - SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>netkeeper校园网破解</title>
    <url>/2024/06/20/netkeeper%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="netkeeper校园网破解教程"><a href="#netkeeper校园网破解教程" class="headerlink" title="netkeeper校园网破解教程"></a>netkeeper校园网破解教程</h1><p> 分享一个关于破解netkeeper限制的教程，现在很多高校都使用netkeeper这个电信的 客户端进行拨号上网，并且限制一个宽带账号只能一个电脑一个手机两台设备使用，这样的限制让很多有多台设备的人感到十分的困扰，所以今天带来的netkeeper的破解教程就是破解netkeeper限制设备使用的教程，让整个宿舍都能用一个宽带账号。不用后台再挂着软件了。</p>
<p>适用的范围：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netkeeper</span><br><span class="line">或者闪讯等软件进行拨号上网的校园网</span><br></pre></td></tr></table></figure>

<p> <strong>设备：</strong>裴讯K2(可自行选择，方法大同小异)</p>
<p> <strong>注意：</strong>k2软件版本v22.6.5.29.xxx之后不可降级，会提示telnet连接失败，有编译器的话略过，没有的话避个雷。</p>
<h2 id="教程总览"><a href="#教程总览" class="headerlink" title="教程总览"></a>教程总览</h2><ol>
<li>刷入breed</li>
<li>输入潘多拉固件</li>
<li>安装脚本，拦截</li>
<li>拨号上网</li>
<li>配置路由器</li>
</ol>
<h3 id="刷入breed"><a href="#刷入breed" class="headerlink" title="刷入breed"></a>刷入breed</h3><p><strong>链接:</strong> <a href="https://wws.lanzous.com/iVNhbgfjcxa" target="_blank" rel="noopener">https://wws.lanzous.com/iVNhbgfjcxa</a><br><strong>密码:</strong>1234</p>
<p>首先要给路由器刷入breed，相当于手机的rec，可以刷固件，还有其他功能，自行研究，不多叙述</p>
<p>这里用的是斐讯breed专用工具，比较简单</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416160633.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416160633.png" alt="img"></a></p>
<p>输入路由器的登入地址，还有密码开始刷机</p>
<p>k2的路由器登入地址默认的是192.168.1.1，默认密码是admin</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416160829.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416160829.png" alt="img"></a></p>
<p>软件可能会报毒，需要临时关闭杀毒软件</p>
<p>等待成功</p>
<p>刷入breed完成</p>
<h3 id="准备刷入潘多拉固件"><a href="#准备刷入潘多拉固件" class="headerlink" title="准备刷入潘多拉固件"></a>准备刷入潘多拉固件</h3><p>假如你买的是刷机版的k2的话，卖家一般都是刷入了breed，所以一般都是从这里开始就行了</p>
<h4 id="潘多拉下载"><a href="#潘多拉下载" class="headerlink" title="潘多拉下载"></a>潘多拉下载</h4><p>进入潘多拉下载站</p>
<p><a href="http://pandorabox.tuuz.cc:8000/" target="_blank" rel="noopener">Pandorabox</a></p>
<p>进入pandorabox/19.01/targets/ralink/目录</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416161921.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416161921.png" alt="img"></a></p>
<p>选择你路由器的处理器进入，不知道的自行百度</p>
<p>k2的处理器是MT7620</p>
<p>k2p的处理器是MT7621</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416162137.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416162137.png" alt="img"></a></p>
<p>直接搜索你路由器的型号，然后下载就行</p>
<h4 id="进入breed"><a href="#进入breed" class="headerlink" title="进入breed"></a>进入breed</h4><p>网线连接lan口与电脑，拔掉路由器电源接头（插在路由器上的接头）<br>长按reset复位键三秒不松，插上接头，等三秒松开，浏览器网址栏输入192.168.1.1进入breed界面<br><a href="https://gitee.com/laosuye/TC/raw/master/20210416162253.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416162253.png" alt="img"></a></p>
<p>选择固件更新，如图<br><a href="https://gitee.com/laosuye/TC/raw/master/20210416162339.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416162339.png" alt="img"></a></p>
<p>选择刚刚下载好的k2固件然后点击上传就行</p>
<p>开始刷机，等待进度条完成100%，路由器会重启，直到完成，浏览器输入192.168.1.1打开如下图界面成功<br><a href="https://gitee.com/laosuye/TC/raw/master/20210416162457.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416162457.png" alt="img"></a></p>
<h4 id="安装脚本拦截"><a href="#安装脚本拦截" class="headerlink" title="安装脚本拦截"></a>安装脚本拦截</h4><p>此时已经完成了大半，开始针对netkeeper进行破译</p>
<p>在固件文件夹中，打开如下软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Z2t3ckebzfnrxpB6fz4g6Q 提取码: c6fq</span><br></pre></td></tr></table></figure>

<p>解压缩打开setup_telnet.exe</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416163035.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416163035.png" alt="img"></a></p>
<p>然后我们需要下载和固件兼容的PPPoE文件</p>
<p>还是刚刚下载固件的网址</p>
<p>进入/pandorabox/19.01/packages/目录</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416161354.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416161354.png" alt="img"></a></p>
<p>具体选择哪个要看你路由器的处理器是什么，自行百度</p>
<p>k2的cpu是7620使用mipsel_24kec_dsp/</p>
<p>k2p的cpu是7621使用mipsel_1004kc_dsp/</p>
<p>这里我进入mipsel_24kec_dsp/packages直接搜pppoe</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416163550.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416163550.png" alt="img"></a></p>
<p>下载好了按照脚本提示改一下名字把后缀删除放在脚本文件夹目录</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416163719.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416163719.png" alt="img"></a></p>
<p>然后按照提示输入路由器的管理ip和管理密码就行，假如是默认的192.168.1.1和admin就直接回车就行</p>
<p>完成以后等待路由器重启完成</p>
<p><a href="https://gitee.com/laosuye/TC/raw/master/20210416164141.png"><img src="https://gitee.com/laosuye/TC/raw/master/20210416164141.png" alt="img"></a></p>
<p>就可以看到路由器的wan口变成了pop拨号上网。</p>
<h3 id="拨号上网"><a href="#拨号上网" class="headerlink" title="拨号上网"></a>拨号上网</h3><p>打开netkeeper拨号即可，提示错误691成功，等待15s左右，路由器即有网。</p>
<h3 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h3><p>要说的是，在潘多拉固件中该怎么修改管理密码和wifi密码呢</p>
<p>浏览器网址栏192.168.1.1进入管理界面<br>在系统&gt;&gt;&gt;管理 中可以修改管理员密码<br>在网络&gt;&gt;&gt;无线 中可以修改wifi名称和密码</p>
<p>在网络栏接口中高级设置中勾选开机自动运行<br>路由器就可以开机自动拨号了</p>
<p>基本设置中也能看到被加密的校园网帐号</p>
]]></content>
      <categories>
        <category>netkeeper</category>
        <category>校园网</category>
      </categories>
      <tags>
        <tag>netkeeper</tag>
        <tag>校园网</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2024/07/12/test/</url>
    <content><![CDATA[<h1>哈哈哈就阿九阿九阿九阿九急啊急啊</h1>
]]></content>
  </entry>
  <entry>
    <title>个人私有云盘NextCloud的搭建</title>
    <url>/2020/05/27/%E4%B8%AA%E4%BA%BA%E7%A7%81%E6%9C%89%E4%BA%91%E7%9B%98NextCloud%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="个人私有云盘NextCloud的搭建"><a href="#个人私有云盘NextCloud的搭建" class="headerlink" title="个人私有云盘NextCloud的搭建"></a>个人私有云盘NextCloud的搭建</h1><p>nextcloud官网</p>
<p><a href="Https://nextcloud.com/">Https://nextcloud.com/</a></p>
<p>准备工作：</p>
<p>1.云服务器一台</p>
<p>2.连接服务器的工具（xshell….）</p>
<h2 id="1、NextCloud的部署方案"><a href="#1、NextCloud的部署方案" class="headerlink" title="1、NextCloud的部署方案"></a>1、NextCloud的部署方案</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用的是开源软件：NextCloud</span><br><span class="line">部署：在Linux云服务器上Docker + NextCloud + mysql</span><br></pre></td></tr></table></figure>

<h2 id="2、Nextcloud部署步骤"><a href="#2、Nextcloud部署步骤" class="headerlink" title="2、Nextcloud部署步骤"></a>2、Nextcloud部署步骤</h2><h3 id="2-1、连接服务器"><a href="#2-1、连接服务器" class="headerlink" title="2.1、连接服务器"></a>2.1、连接服务器</h3><p>首先可以连接到云服务器，Windows可以使用xshell或者其他工具，我是mac系统，所以我推荐Termius</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527205909.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Label			名称可以随便取</span><br><span class="line">Address		服务器的IP地址</span><br><span class="line">Username	服务器用户，一般为root</span><br><span class="line">Password	root的密码</span><br></pre></td></tr></table></figure>

<p>其余可以不用理会，然后就直接save保存，双击连接服务器</p>
<h3 id="2-2安装Docker"><a href="#2-2安装Docker" class="headerlink" title="2.2安装Docker"></a>2.2安装Docker</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)yum 安装docker</span><br><span class="line">	yum install -y docker</span><br><span class="line">(2)启动Docker 设置Docker的自启动</span><br><span class="line">	systemctl start docker</span><br><span class="line">	systemctl enable docker</span><br></pre></td></tr></table></figure>

<h3 id="2-3、docker下载mysql"><a href="#2-3、docker下载mysql" class="headerlink" title="2.3、docker下载mysql"></a>2.3、docker下载mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name&#x3D;nextcloud_db -e MYSQL_ROOT_PASSWORD&#x3D;nextcloud -e MYSQL_DATABASE&#x3D;nextcloud -e MYSQL_USER&#x3D;nextcloud -e MYSQL_PASSWORD&#x3D;nextcloud -v &#x2F;data&#x2F;www&#x2F;nectcloud&#x2F;mysqldb:&#x2F;var&#x2F;lib&#x2F;mysql -d mysql:5</span><br></pre></td></tr></table></figure>

<p>其中过程有点久，请耐心等待，假如中途报错，请关闭SELinux</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">永久关闭SELinux</span><br><span class="line">	1.vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br><span class="line">	2.将SELINUX&#x3D;cnforcing改为SELINUX&#x3D;disabled</span><br><span class="line">	3.reboot</span><br></pre></td></tr></table></figure>

<h3 id="2-4、Docker启动Nextcloud"><a href="#2-4、Docker启动Nextcloud" class="headerlink" title="2.4、Docker启动Nextcloud"></a>2.4、Docker启动Nextcloud</h3><p>​    1.搜索nextcloud镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search nextcloud</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527211030.png" alt></p>
<p>一般来说第一个就是。</p>
<p>2.拉取官方镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull docker.io&#x2F;nextcloud</span><br></pre></td></tr></table></figure>

<p>下载时间会比较久，多试几次就好了</p>
<p>3.启动Nextcloud</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name&#x3D;nextcloud --link nextcloud_db:nextcloud_db -p 8001:80 -v &#x2F;date&#x2F;www&#x2F;nextcloud&#x2F;data:&#x2F;var&#x2F;www&#x2F;html&#x2F;data -d nextcloud</span><br></pre></td></tr></table></figure>

<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>打开浏览器输入云服务器的IP地址或者域名+端口8001</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527214335.png" alt></p>
<p>出来这样的界面，这里是设置超级用户。这里可以自己随便设置</p>
<img src="https://gitee.com/laosuye/TC/raw/master/20200527214456.png" style="zoom:150%;">

<p>这里一定要选择mysql数据库，然后就是一开始我们安装的时候设置的数据库名，密码啥的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name&#x3D;nextcloud_db -e MYSQL_ROOT_PASSWORD&#x3D;nextcloud -e MYSQL_DATABASE&#x3D;nextcloud -e MYSQL_USER&#x3D;nextcloud -e MYSQL_PASSWORD&#x3D;nextcloud -v &#x2F;data&#x2F;www&#x2F;nectcloud&#x2F;mysqldb:&#x2F;var&#x2F;lib&#x2F;mysql -d mysql:5</span><br><span class="line"></span><br><span class="line">我们刚刚设置的都是nextcloud，所以直接写就好了</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/laosuye/TC/raw/master/20200527214652.png" style="zoom:150%;">

<p>然后等待一些时间就好了，里面有一些设置可以慢慢自己去摸索！</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>服务器</category>
        <category>网盘</category>
        <category>私有云</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>服务器</tag>
        <tag>网盘</tag>
        <tag>私有云</tag>
      </tags>
  </entry>
  <entry>
    <title>思科生成树(stp)配置</title>
    <url>/2020/04/24/%E6%80%9D%E7%A7%91%E7%94%9F%E6%88%90%E6%A0%91-stp-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="#实验拓扑图"></a>#实验拓扑图</h1><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001038.png" alt></p>
<p>实验步骤：</p>
<h1 id="第一步：-分别配置pc的ip地址，以及给每个交换机创建vlan10-vlan20-vlan30-vlan40"><a href="#第一步：-分别配置pc的ip地址，以及给每个交换机创建vlan10-vlan20-vlan30-vlan40" class="headerlink" title="第一步：#分别配置pc的ip地址，以及给每个交换机创建vlan10,vlan20,vlan30,vlan40"></a>第一步：#分别配置pc的ip地址，以及给每个交换机创建vlan10,vlan20,vlan30,vlan40</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># PC11 </span><br><span class="line">ip address 192.168.10.1  255.255.255.0          </span><br><span class="line">gateway 192.168.10.254      </span><br><span class="line">#pc12       </span><br><span class="line">ip address 192.168.20.1 255.255.255.0        </span><br><span class="line">gateway 192.168.20.254     </span><br><span class="line">#pc13        </span><br><span class="line">ip address 192.168.30.1 255.255.255.0         </span><br><span class="line">gateway 192.168.30.254     </span><br><span class="line">#pc14    </span><br><span class="line">ip address 192.168.40.1 255.255.255.0       </span><br><span class="line">gateway 192.168.40.254   </span><br><span class="line">#pc17     </span><br><span class="line">ip address 192.168.10.2 255.255.255.0     </span><br><span class="line">gateway 192.168.10.254   </span><br><span class="line">#pc16     </span><br><span class="line">ip address 192.168.20.2 255.255.255.0     </span><br><span class="line">gateway 192.168.20.254    </span><br><span class="line">#pc15   </span><br><span class="line">ip address 192.168.30.2 255.255.255.0    </span><br><span class="line">gateway 192.168.30.254  </span><br><span class="line">#pc 18  </span><br><span class="line">ip address 192.168.40.2 255.255.255.0   </span><br><span class="line">gateway 192.168.40.254</span><br></pre></td></tr></table></figure>

<p># 分别给所有交换机创建vlan,保持vlan数据库保持一致</p>
<p>#假如左上角的是sw1,右上角sw2,最下面是sw3</p>
<h2 id="在全局配置模式下："><a href="#在全局配置模式下：" class="headerlink" title="# 在全局配置模式下："></a># 在全局配置模式下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#vlan 10  , 20 ,30 ,40</span><br></pre></td></tr></table></figure>

<p>#配置各个交换机上的端口链接是trunk</p>
<h4 id="配置sw3"><a href="#配置sw3" class="headerlink" title="# 配置sw3"></a># 配置sw3</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># interface range f0&#x2F;1-2</span><br><span class="line"> switchport mode trunk  &#x2F;&#x2F;思科二层交换机不用封装dot1q，直接trunk</span><br></pre></td></tr></table></figure>

<h4 id="配置sw2"><a href="#配置sw2" class="headerlink" title="#配置sw2"></a>#配置sw2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface range f0&#x2F;1-2</span><br><span class="line">switchport trunk encapsulation dot1q &#x2F;&#x2F;思科三层交换机必须封装dot1q,才能设置trunk链路</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>

<h4 id="配置sw1"><a href="#配置sw1" class="headerlink" title="#配置sw1"></a>#配置sw1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface range f0&#x2F;1-2</span><br><span class="line">switchport trunck  encapsulation dot1q &#x2F;&#x2F;思科三层交换机必须封装dot1q协议，才能设置trunk链路</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure>

<p>#以上配置完之后，先确定根交换机，副根交换机，和接入层交换机，</p>
<p> #我确定完之后，sw1为主根交换机，sw2为副根交换机，sw3为接入层交换机</p>
<p># 配置，在sw1中，配置vlan10,vlan20,为主根，vlan30,vlan40,为次根</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在全局配置模式下：</span><br><span class="line">spanning-tree vlan 10 priority  0 </span><br><span class="line">spanning-tree-vlan 20 priority 0</span><br><span class="line">spanning-tree-vlan 30 priority 4096</span><br><span class="line">spanning-tree-vlan 40 priority 4096</span><br><span class="line">&#x2F;&#x2F; #配置生成树的主根时，设置它的优先级，优先级默认是32768，比它小就越靠谱，</span><br><span class="line">#优先级默认是4096的倍数</span><br><span class="line">  </span><br><span class="line"> 配置，在sw2中，配置vlan30,vlan40,为主根，vlan10,vlan20,为次根</span><br><span class="line"> # 在全局配置模式下：</span><br><span class="line">spanning-tree vlan 10 priority  4096 </span><br><span class="line">spanning-tree-vlan 20 priority 4096</span><br><span class="line">spanning-tree-vlan 30 priority 0</span><br><span class="line">spanning-tree-vlan 40 priority 0</span><br><span class="line">&#x2F;&#x2F; #配置生成树的主根时，设置它的优先级，优先级默认是32768，比它小就越靠谱，</span><br><span class="line">#优先级默认是4096的倍数</span><br></pre></td></tr></table></figure>

<h4 id="接下来打开端口f0-2"><a href="#接下来打开端口f0-2" class="headerlink" title="#接下来打开端口f0/2"></a>#接下来打开端口f0/2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intface f0&#x2F;2</span><br><span class="line">no shutdown</span><br></pre></td></tr></table></figure>

<h3 id="如下图"><a href="#如下图" class="headerlink" title="#如下图"></a>#如下图</h3><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001045.png" alt></p>
<h6 id="现在用命令ping-10-1-1-2-测试-看是否可以ping通-如果ping通的话，就说明生成树配置成功"><a href="#现在用命令ping-10-1-1-2-测试-看是否可以ping通-如果ping通的话，就说明生成树配置成功" class="headerlink" title="#现在用命令ping 10.1.1.2 测试 看是否可以ping通,如果ping通的话，就说明生成树配置成功"></a>#现在用命令ping 10.1.1.2 测试 看是否可以ping通,如果ping通的话，就说明生成树配置成功</h6><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001229.png" alt></p>
<p>#从上图可以看书，是可以ping通的，说明没有出现环路，起到了负载均衡的作用，流量即可以走左边，又可以走右边，</p>
<p>#要想到各个vlan 之间可以互通的话，就必须配置虚拟网关</p>
<h4 id="配置-sw1-交换机，vlan10-vlan20-vlan30-vlan40-的虚拟网关，思科三层交换机路由功能默认是关闭的，需要开启-：ip-routing"><a href="#配置-sw1-交换机，vlan10-vlan20-vlan30-vlan40-的虚拟网关，思科三层交换机路由功能默认是关闭的，需要开启-：ip-routing" class="headerlink" title="#配置 sw1 交换机，vlan10.vlan20,vlan30,vlan40,的虚拟网关，思科三层交换机路由功能默认是关闭的，需要开启 ：ip routing"></a>#配置 sw1 交换机，vlan10.vlan20,vlan30,vlan40,的虚拟网关，思科三层交换机路由功能默认是关闭的，需要开启 ：ip routing</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface vlan 10</span><br><span class="line"> ip address 192.168.10.254 255.255.255.0</span><br><span class="line"> no shutdown</span><br><span class="line"> exit</span><br><span class="line"> interface vlan 20</span><br><span class="line"> ip address 192.168.20.254 255.255.255.0</span><br><span class="line"> no shutdown</span><br><span class="line"> exit</span><br><span class="line"> interface vlan 30</span><br><span class="line"> ip address 192.168.30.254 255.255.255.0</span><br><span class="line"> no shutdown </span><br><span class="line"> exit</span><br><span class="line"> interface vlan 40</span><br><span class="line"> ip address 192.168.40.254 255.255.255.0</span><br><span class="line"> no shutdown</span><br></pre></td></tr></table></figure>

<h4 id="接下来用vlan10-网段的pc-ping-vlan-30-40之间的pc-如下图"><a href="#接下来用vlan10-网段的pc-ping-vlan-30-40之间的pc-如下图" class="headerlink" title="#接下来用vlan10 网段的pc ping vlan 30,40之间的pc 如下图"></a>#接下来用vlan10 网段的pc ping vlan 30,40之间的pc 如下图</h4><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001239.png" alt></p>
<p>#以上说明测试成功，vlan 之间可以互访了</p>
<p>#接下来我关闭sw3 f0/1 .使他流量从副根上走，起到备份作用，如下图</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001245.png" alt></p>
<h4 id="继续ping-vlan-30-vlan-40-如下图"><a href="#继续ping-vlan-30-vlan-40-如下图" class="headerlink" title="#继续ping vlan 30 ,vlan 40 如下图"></a>#继续ping vlan 30 ,vlan 40 如下图</h4><p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001252.png" alt></p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527001304.png" alt></p>
<p>#以上说明测试成功，说明起到备份作用</p>
<p>#同理可得，右边线路坏了的话，会从左边走</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>配置生成树，目的是为了防止物理环路的产生，防止广播风暴，好处是，可以起到负载均衡的作用，和链路的冗余备份</p>
]]></content>
      <categories>
        <category>网络</category>
        <category>Cisco</category>
        <category>stp</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影--城市</title>
    <url>/2020/05/27/%E6%91%84%E5%BD%B1-%E5%9F%8E%E5%B8%82/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>今年由于疫情原因，再也没有了当初的年味，过年都是安安静静。</p>
<p>​                        那些不经意想起的，总是记忆里最深刻的</p>
<p>​                        带着面具时你说我虚伪，摘下面具你问我是谁。</p>
<p>​                        我们都生活在阴沟里，但仍有人仰望星空。</p>
<p>​                        人间不会有单纯的快乐，快乐总夹杂着烦恼和忧虑，人间也没有永远</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527011339.jpeg" alt></p>
<p>​                人的一生注定会遇到两个人，一个惊艳了时光，一个温柔了岁月。</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527011442.jpeg" alt></p>
<p>​                岁月悠长，山河无恙，爱你如昔，念你如昨</p>
<p>​                翻过高山，正遇江海。行过雪原，恰逢花期。这大概就是行走的意义</p>
<p>​                就这样与你告别，借万里青山，以之为隔，世世不见。</p>
<p>​                遇见你是多小的概率我没兴趣知道，我只想把失去你的概率变为零</p>
<p><img src="https://gitee.com/laosuye/TC/raw/master/20200527011934.jpeg" alt></p>
]]></content>
      <categories>
        <category>摄影</category>
        <category>相片</category>
        <category>城市</category>
        <category>灯光</category>
      </categories>
      <tags>
        <tag>摄影</tag>
        <tag>城市</tag>
      </tags>
  </entry>
  <entry>
    <title>教你读懂路由表</title>
    <url>/2020/04/23/%E6%95%99%E4%BD%A0%E8%AF%BB%E6%87%82%E8%B7%AF%E7%94%B1%E8%A1%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">源码:--------------------------------------------------------------------- -----------</span><br><span class="line">Active Routes:</span><br><span class="line">Network Destination Netmask Gateway Interface Metric</span><br><span class="line">0.0.0.0 0.0.0.0 192.168.123.254 192.168.123.88 1</span><br><span class="line">0.0.0.0 0.0.0.0 192.168.123.254 192.168.123.68 1</span><br><span class="line">127.0.0.0 255.0.0.0 127.0.0.1 127.0.0.1 1</span><br><span class="line">192.168.123.0 255.255.255.0 192.168.123.68 192.168.123.68 1</span><br><span class="line">192.168.123.0 255.255.255.0 192.168.123.88 192.168.123.88 1</span><br><span class="line">192.168.123.68 255.255.255.255 127.0.0.1 127.0.0.1 1</span><br><span class="line">192.168.123.88 255.255.255.255 127.0.0.1 127.0.0.1 1</span><br><span class="line">192.168.123.255 255.255.255.255 192.168.123.68 192.168.123.68 1</span><br><span class="line">192.168.123.255 255.255.255.255 192.168.123.88 192.168.123.88 1</span><br><span class="line">224.0.0.0 224.0.0.0 192.168.123.68 192.168.123.68 1</span><br><span class="line">224.0.0.0 224.0.0.0 192.168.123.88 192.168.123.88 1</span><br><span class="line">255.255.255.255 255.255.255.255 192.168.123.68 192.168.123.68 1</span><br><span class="line">Default Gateway: 192.168.123.254 ----------------------------------------------------</span><br></pre></td></tr></table></figure>

<h1 id="当前的路由："><a href="#当前的路由：" class="headerlink" title="当前的路由："></a>当前的路由：</h1><p>destination 目的网段<br>mask 子网掩码<br>interface 到达该目的地的本路由器的出口ip<br>gateway 下一跳路由器入口的ip，路由器通过interface和gateway定义一调到下一个路由器的链路，通常情况下，interface和gateway是同一网段的<br>metric 跳数，该条路由记录的质量，一般情况下，如果有多条到达相同目的地的路由记录，路由器会采用metric值小的那条路由</p>
<h2 id="第一条"><a href="#第一条" class="headerlink" title="第一条"></a>第一条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">缺省路由：意思就是说，当一个数据包的目的网段不在你的路由记录中，那么，你的路由器该把那个数据包发送到哪里！缺省路由的网关是由你的连接上的default gateway决定的</span><br><span class="line">该路由记录的意思是：当我接收到一个数据包的目的网段不在我的路由记录中，我会将该数据包通过192.168.123.88这个接口发送到192.168.123.254这个地址，这个地址是下一个路由器的一个接口，这样这个数据包就可以交付给下一个路由器处理，与我无关。该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第二条"><a href="#第二条" class="headerlink" title="第二条"></a>第二条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">缺省路由：该路由记录的意思是：当我接收到一个数据包的目的网段不在我的路由记录中，我会将该数据包通过192.168.123.68这个接口发送到192.168.123.254这个地址，这个地址是下一个路由器的一个接口，这样这个数据包就可以交付给下一个路由器处理，与我无关。该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第三条"><a href="#第三条" class="headerlink" title="第三条"></a>第三条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地环路：127.0.0.0这个网段内所有地址都指向自己机器，如果收到这样一个数据，应该发向哪里 该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第四条"><a href="#第四条" class="headerlink" title="第四条"></a>第四条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直联网段的路由记录：当路由器收到发往直联网段的数据包时该如何处理，这种情况，路由记录的interface和gateway是同一个。</span><br><span class="line">当我接收到一个数据包的目的网段是192.168.123.0时，我会将该数据包通过192.168.123.68这个接口直接发送出去，因为这个端口直接连接着192.168.123.0这个网段，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第五条"><a href="#第五条" class="headerlink" title="第五条"></a>第五条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直联网段的路由记录</span><br><span class="line">当我接收到一个数据包的目的网段是192.168.123.0时，我会将该数据包通过192.168.123.88这个接口直接发送出去，因为这个端口直接连接着192.168.123.0这个网段，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第六条"><a href="#第六条" class="headerlink" title="第六条"></a>第六条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地主机路由：当路由器收到发送给自己的数据包时将如何处理</span><br><span class="line">当我接收到一个数据包的目的网段是192.168.123.68时，我会将该数据包收下，因为这个数据包时发送给我自己的，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第七条"><a href="#第七条" class="headerlink" title="第七条"></a>第七条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地主机路由：当路由器收到发送给自己的数据包时将如何处理</span><br><span class="line">当我接收到一个数据包的目的网段是192.168.123.88时，我会将该数据包收下，因为这个数据包时发送给我自己的，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第八条"><a href="#第八条" class="headerlink" title="第八条"></a>第八条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地广播路由：当路由器收到发送给直联网段的本地广播时如何处理</span><br><span class="line">当我接收到广播数据包的目的网段是192.168.123.255时，我会将该数据从192.168.123.68接口以广播的形势发送出去，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第九条"><a href="#第九条" class="headerlink" title="第九条"></a>第九条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地广播路由：当路由器收到发送给直联网段的本地广播时如何处理</span><br><span class="line">当我接收到广播数据包的目的网段是192.168.123.255时，我会将该数据从192.168.123.88接口以广播的形势发送出去，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第十条"><a href="#第十条" class="headerlink" title="第十条"></a>第十条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组播路由：当路由器收到一个组播数据包时该如何处理</span><br><span class="line">当我接收到组播数据包时，我会将该数据从192.168.123.68接口以组播的形势发送出去，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第十一条"><a href="#第十一条" class="headerlink" title="第十一条"></a>第十一条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组播路由：当路由器收到一个组播数据包时该如何处理</span><br><span class="line">当我接收到组播数据包时，我会将该数据从192.168.123.88接口以组播的形势发送出去，该路由记录的线路质量 1</span><br></pre></td></tr></table></figure>

<h2 id="第十二条"><a href="#第十二条" class="headerlink" title="第十二条"></a>第十二条</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">广播路由：当路由器收到一个绝对广播时该如何处理</span><br><span class="line">当我接收到绝对广播数据包时，将该数据包丢弃掉</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络</category>
        <category>路由</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>文件属性与文件权限的配置</title>
    <url>/2020/04/23/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="Red-Hat-Linux支持的文件系统："><a href="#Red-Hat-Linux支持的文件系统：" class="headerlink" title="Red Hat Linux支持的文件系统："></a>Red Hat Linux支持的文件系统：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ext3文件系统</span><br><span class="line">FAT(适用各种版本的DOS)</span><br><span class="line">NTFS(适用Windows NT -- Windows 2000)</span><br><span class="line">VFAT和FAT32（适用Windows 9x)</span><br><span class="line">HFS(适用MacOS)</span><br><span class="line">HPFS(适用OS&#x2F;2) </span><br><span class="line">u：user，表示所有者。</span><br><span class="line">g：group，表示属组。</span><br><span class="line">o：others，表示其它用户。</span><br><span class="line">a：all，表示以上三种用户。</span><br></pre></td></tr></table></figure>

<p>利用“ls /lib/modules/2.6.32-358.el6.x86_64/kernel/fs ” </p>
<p>可以查看Linux系统所支持的文件系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;: 根目录，包含整个linux系统的所有目录和文件</span><br><span class="line">&#x2F;bin:  此目录放置操作系统运行时所使用的各种命令程序。</span><br><span class="line">&#x2F;boot: 系统启动时必须读取的文件，包括系统内核。</span><br><span class="line">&#x2F;dev:  存放外围设备代号的文件</span><br><span class="line">&#x2F;etc:  放置与系统设置、管理相关的文件</span><br><span class="line">&#x2F;etc&#x2F;rc.d:    包含了开机或关机时所执行的script文件</span><br><span class="line">&#x2F;etc&#x2F;X11:    X Window配置文件的目录</span><br><span class="line">&#x2F;home:    此目录为默认用来放置账号的自家目录</span><br><span class="line">&#x2F;lib:        放置一些共用的函数库</span><br><span class="line">&#x2F;lib&#x2F;modules: 存放系统内核的块</span><br><span class="line">&#x2F;lost+found:  存放一些系统检查结果，把发现的一些不合法的文件或数据都存放在这里；通常此目录为空</span><br><span class="line">&#x2F;mnt:    默认含有&#x2F;mnt&#x2F;cdrom和&#x2F;mnt&#x2F;floppy两个目录，用来作为光盘与软盘的挂载点</span><br><span class="line">&#x2F;proc:  是一个虚拟文件系统，它存放当前内存映象，主要用于在不重启动机器的情况下管理内核</span><br></pre></td></tr></table></figure>

<h2 id="绝对路径：由根目录（-）开始写起的文件名或目录"><a href="#绝对路径：由根目录（-）开始写起的文件名或目录" class="headerlink" title="绝对路径：由根目录（/）开始写起的文件名或目录"></a>绝对路径：由根目录（/）开始写起的文件名或目录</h2><h2 id="相对路径：相对于目前路径的文件名写法"><a href="#相对路径：相对于目前路径的文件名写法" class="headerlink" title="相对路径：相对于目前路径的文件名写法"></a>相对路径：相对于目前路径的文件名写法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd   &#x2F;var&#x2F;log    （绝对路径）</span><br><span class="line">cd  ..&#x2F;var&#x2F;log    （相对路径）</span><br><span class="line">．  ：代表当前的目录，也可以使用.&#x2F;来表示。</span><br><span class="line">．． ：代表上—层目录，也可以用..&#x2F;来代表。</span><br></pre></td></tr></table></figure>

<p>以文字表示法修改文件权限时，上例中的权限设置命令应该为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@Server ~]# chmod u&#x3D;rw,g&#x3D;rw,o&#x3D;r &#x2F;etc&#x2F;file</span><br><span class="line"> 格式：chmod [u g o a..] [+ - &#x3D;] [rwx…] 文件名</span><br><span class="line">     + :　表示增加权限</span><br><span class="line"> 　 - :    表示删除权限</span><br><span class="line"> &#x3D; :    表示分配权限，同时将原有权限删除</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod   g+x  test</span><br></pre></td></tr></table></figure>

<h2 id="给同组用户分配执行权限"><a href="#给同组用户分配执行权限" class="headerlink" title="给同组用户分配执行权限"></a>给同组用户分配执行权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod   o-rx  test</span><br></pre></td></tr></table></figure>

<p>给其他用户删除读和执行权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod   u+rwx,g+rwx,o+rwx  test</span><br></pre></td></tr></table></figure>

<h2 id="给所属主、同组和其他用户分配读、写和执行权限"><a href="#给所属主、同组和其他用户分配读、写和执行权限" class="headerlink" title="给所属主、同组和其他用户分配读、写和执行权限"></a>给所属主、同组和其他用户分配读、写和执行权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod   u-rx,g-rx  test</span><br></pre></td></tr></table></figure>

<h2 id="删除属主、同组的读和执行权限"><a href="#删除属主、同组的读和执行权限" class="headerlink" title="删除属主、同组的读和执行权限"></a>删除属主、同组的读和执行权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod   a+rwx  test</span><br></pre></td></tr></table></figure>

<h2 id="给所属主、同组和其他用户分配读、写和执行权限-1"><a href="#给所属主、同组和其他用户分配读、写和执行权限-1" class="headerlink" title="给所属主、同组和其他用户分配读、写和执行权限"></a>给所属主、同组和其他用户分配读、写和执行权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod 777 test</span><br></pre></td></tr></table></figure>

<h2 id="给属主、同组和其他用户分配读、写和执行权限"><a href="#给属主、同组和其他用户分配读、写和执行权限" class="headerlink" title="给属主、同组和其他用户分配读、写和执行权限"></a>给属主、同组和其他用户分配读、写和执行权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod 500 test</span><br></pre></td></tr></table></figure>

<h2 id="给属主用户分配读和执行的权限而同组和其他用户无权限"><a href="#给属主用户分配读和执行的权限而同组和其他用户无权限" class="headerlink" title="给属主用户分配读和执行的权限而同组和其他用户无权限"></a>给属主用户分配读和执行的权限而同组和其他用户无权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod 666 test</span><br></pre></td></tr></table></figure>

<h2 id="给属主、同组及其他用户分配读和写的权限"><a href="#给属主、同组及其他用户分配读和写的权限" class="headerlink" title="给属主、同组及其他用户分配读和写的权限"></a>给属主、同组及其他用户分配读和写的权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chmod 711 test</span><br></pre></td></tr></table></figure>

<h2 id="给属主分配读、写、执行权限，同组和其他用户分配执行权限"><a href="#给属主分配读、写、执行权限，同组和其他用户分配执行权限" class="headerlink" title="给属主分配读、写、执行权限，同组和其他用户分配执行权限"></a>给属主分配读、写、执行权限，同组和其他用户分配执行权限</h2><p>格式：chown [选项] 用户[:或.组] 文件或目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chown lrj  test</span><br></pre></td></tr></table></figure>

<p>将test属主改为lrj</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chown lrj.lrj test</span><br></pre></td></tr></table></figure>

<p>将test的属主改为lrj、属组改为lrj</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chown  -R wang:lrj test</span><br></pre></td></tr></table></figure>

<p>将test及在下的所有目录及文件的属主改为wang，属组改为lrj</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@host root]# chgrp  root test</span><br></pre></td></tr></table></figure>

<p>将test的属组改为root</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>权限</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客--自我介绍</title>
    <url>/2020/04/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p> &nbsp;  &nbsp;&nbsp;   大家好，我叫老苏叶，先欢迎大家来到了我的博客，我学的是计算机网络和Linux那方面的专业，学过C语言，H5，CSS，python等一些编程语言，也学习过MySQL数据库等知识，现在本人正在学习Java方面的知识，除去编程，我还喜欢拍照片还有弹吉他，在后期我或许会也会在这个博客添加相册功能然后来为自己拍的照片做个记录。</p>
<p>&nbsp; &nbsp;  &nbsp;我写这些博客的目的有两点，第一点是为了通过这些博客是自己成长起来，增长见识，学习到更多的知识，以便以后能够用到自己的所学，第二点是为了读者，看我的博客的人其实是幸运的，因为我是一个初学者，读者朋友可以和我一起进步，一起探讨，共同进步，达到互利共赢，也希望我写的博客内容能够帮助一些在编程方面有问题的朋友。</p>
<p> &nbsp; &nbsp;  &nbsp;在这里如果你发现我写的有哪些不对或不足之处，请您谅解。你可以及时评论来告诉我，我会采纳改正的，我会不断完善我的博客论坛的。希望你们常来，谢谢！</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
</search>
